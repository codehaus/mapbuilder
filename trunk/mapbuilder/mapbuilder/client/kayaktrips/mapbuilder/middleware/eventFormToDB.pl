#!/usr/bin/perl

# Load event into the Community Map Builder database 
# from form submitted by event.html
# TODO: use rollback functionality so no db changes happen if 
#       anything fails

# user variables
$cmbDir = "/var/www/html/cmb";
$uploadDir = $cmbDir . "/www/events";
$dbuser = "webster";
$dbname = "cmb";
$dbaddress = "localhost";
$srs = "4326"; #hardcoded SRS--BAD

# Invoke needed library modules
use CGI;
use CGI::Lite;
use File::Basename;
use DBI;

# Limit command path
($ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin'); # =~ s/\s*,\s*/:/g;

# Retrieve parameters from (lower-cased) GET/POST query string
$ENV{'QUERY_STRING'} =~ tr/A-Z/a-z/ if defined $ENV{QUERY_STRING};
$query = new CGI;

# Set up database access
$database = "DBI:Pg:dbname=$dbname;host=$dbaddress";
$dbh = DBI->connect("$database", $dbuser) or die $DBI::errstr;

################################
# Get the userid. This will determine the directory name 
# to save content to. Match the user-submitted email address 
# to one in the database. If none, create a new one.
################################
$createuser = 'true';

# look up email address
if ($query->param('email')) {
	$email = $query->param('email'); 
	$sth = queryID("userid", "cmbuser", "email", $email);
	while (@rec = $sth->fetchrow_array) { #takes the last matching userid
		($userid) = @rec;
	}
	
	if ($userid) {
		$createuser = 'false';
		#print "existing email <$email> has user id <$userid>\n";
	}

} else {
	# the user id '1' is for events with no email address
	$userid = 1;
	$createuser = 'false';
}

# if we have to create a new user, we need to do that and get that user id
if ($createuser eq 'true') {
	# add new cmbuser record
	$sql = "INSERT INTO cmbuser (email) VALUES (\'$email\')";
	$sth = $dbh->prepare("$sql");
	$sth->execute or die "Couldn't execute email query\n";
	
	# get the userid for the record (it's auto-generated by the 
	# database in the previous statement
	$sth = queryID("userid", "cmbuser", "email", $email);
	while (@rec = $sth->fetchrow_array) { #takes the last matching userid
		($userid) = @rec;
	}
}

################################
### Populate the feature table##
################################

# get geographic coordinates
# Why are the coords bracketed!?!
$xcoords = $query->param('tripxcoords');
$xcoords =~ tr/\[\]//d;
$ycoords = $query->param('tripycoords');
$ycoords =~ tr/\[\]//d;
@xs = split(",",$xcoords);
@ys = split(",",$ycoords);

#starting point
$startx = $xs[0];
$starty = $ys[0];
$routestartsql = "GeometryFromText(\'POINT($startx $starty)\',$srs)";

# do route
$routesql = "GeometryFromText(\'LINESTRING(";
foreach $v (@xs) {
	$x = $v;
	$y = shift(@ys);
	$routesql .= "$x $y, ";
}
$routesql = substr($routesql,0,-2);
$routesql .= ")\',$srs)";

# do end point
$routeendsql = "GeometryFromText(\'POINT($x $y)\',$srs)";

# do name
$tripname = "";
if ($query->param('eventname')) {
	$tripname = $query->param('eventname');
}

#add the new feature to the database and get the featureid. 
#WARNING: I use the max function here, assuming that no 
#features are added to the database between my insert and 
#select statements. This isn't necessarily true, so a better
#way needs to be found.
$sql = "INSERT INTO feature (userid,name,route,routestart,routeend) ";
$sql .= "VALUES ($userid,\'$tripname\',$routesql,$routestartsql,$routeendsql)";
$sth = $dbh->prepare("$sql");
$sth->execute or die "Couldn't execute feature insert query\n";

# get featureid we just created
$sql = "select max(featureid) from feature where userid=$userid";
$sth = $dbh->prepare("$sql");
$sth->execute or die "Couldn't execute get max featureid query\n";
$featureid = $sth->fetchrow_array();

################################
### Populate the story table  ##
################################

#WARNING: I use the max function here, assuming that no 
#stories are added to the database between my insert and 
#select statements. This isn't necessarily true, so a better
#way needs to be found.
$sql = "INSERT INTO story (featureid,userid) ";
$sql .= "VALUES ($featureid,$userid)";
$sth = $dbh->prepare("$sql");
$sth->execute or die "Couldn't execute feature insert query\n";

# get storyid we just created
$sql = "select max(storyid) from story where featureid=$featureid";
$sth = $dbh->prepare("$sql");
$sth->execute or die "Couldn't execute get max featureid query\n";
$storyid = $sth->fetchrow_array();

#################################
### Populate the content table ##
#################################
# no auto-generated id in this table, so no problem as above

# Make user directory
$userDir = $uploadDir."/".$userid;
mkdir($userDir);

# make media directory
$mediaDir = $userDir."/".$storyid;
mkdir($mediaDir);

# Save media to disk and record file names
$html = "" . url_encode($query->param('triptext'));
$starthtml = "" . url_encode($query->param('tripstarttext'));
$endhtml = "" . url_encode($query->param('tripendtext'));

# write html to disk
$htmlpath = "$mediaDir/trip.html";
open(DATA, ">$htmlpath");
print {DATA} $html;
close(DATA);
$htmlstartpath = "$mediaDir/tripstart.html";
open(DATA, ">$htmlstartpath");
print {DATA} $starthtml;
close(DATA);
$htmlendpath = "$mediaDir/tripend.html";
open(DATA, ">$htmlendpath");
print {DATA} $endhtml;
close(DATA);

# write html path names to database
$sql = "INSERT INTO content (storyid,htmlfile,starthtmlfile,endhtmlfile) ";
$sql .= "VALUES ($storyid,\'$htmlpath\',\'$htmlstartpath\',\'$htmlendpath\')";
$sth = $dbh->prepare("$sql");
$sth->execute or die "Couldn't execute html content insert query\n";

# write media to disk
$trippic = $query->param('trippic');
$tripstartpic = $query->param('tripstartpic');
$tripendpic = $query->param('tripendpic');

if ($trippic || $tripendpic || $tripstartpic) {
  if ($trippic) {
		$picpath = writeImage($trippic,"r",$mediaDir);
		$sql = "UPDATE content set mediafile=\'$picpath\' where storyid=$storyid; ";
		$sth = $dbh->prepare("$sql");
		$sth->execute or die "Couldn't execute media content update query\n";
	}	
  if ($tripstartpic) {
		$picstartpath = writeImage($tripstartpic,"sr",$mediaDir);
		$sql = "UPDATE content set startmediafile=\'$picstartpath\' where storyid=$storyid; ";
		$sth = $dbh->prepare("$sql");
		$sth->execute or die "Couldn't execute media content update query\n";
	}
  if ($tripendpic) {
		$picendpath = writeImage($tripendpic,"er",$mediaDir);
		$sql = "UPDATE content set endmediafile=\'$picendpath\' where storyid=$storyid; ";
		$sth = $dbh->prepare("$sql");
		$sth->execute or die "Couldn't execute media content update query\n";
	}
}

###################################
# Return a response to the client #
###################################
print "Content-Type: text/html\n\n";
print "<html>\n<head>\n";
print "  <link href=\"../normal.css\" rel=\"stylesheet\" type=\"text/css\">\n";
print "  <title>Response</title>\n  </head>\n";
print "<body>\n";
print "<h1>Your event has been added!</h1>\n";
print "<a href=\"/cmb/www/index.html\">Back home</a>\n";
print "</body>\n</html>\n";


#### subroutines ####

sub queryID() {
	$id = pop @_; # search value
	$idcol = pop @_; # search column
	$table = pop @_; # table to search
	$getid = pop @_; # value to get
	$sql = "select $getid from $table where $idcol = \'$id\'";
	$sth = $dbh->prepare("$sql");
	$sth->execute or die "Couldn't execute email query\n";
	return $sth;
}

# write image to disk and return a  
# file path to the image
sub writeImage() {
  $fpath = pop @_; # last value is directory to save in
  $fname = pop @_; # file name
  $imgFile = pop @_; # actual image data
  @path = split(m{[//:V]}, $imgFile);
  $fname .= "_" . $path[$#path];
  $tmppath = $fpath . "/" . $fname;
  open(DATA, ">$tmppath");
  binmode DATA;
  while ( $bytesread=read($imgFile, $data, 1024) ) {
      $size += $bytesread;  
      print DATA $data;
  }
  close(DATA);
	return $tmppath;
}
