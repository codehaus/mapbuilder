/3.1

(Extension.1

	Name:	"toWKT Interface Extension"

	Dependencies:	"$AVBIN/avdlog.dll\n"

	FirstRootClassName:	"List"

	Roots:	2

	Roots:	159

	Roots:	160

	Roots:	159

	Roots:	163

	Roots:	164

	Roots:	165

	Roots:	166

	Roots:	167

	Roots:	168

	Roots:	169

	Roots:	170

	Roots:	171

	Roots:	172

	Roots:	173

	Roots:	174

	Roots:	175

	Roots:	176

	Roots:	177

	Roots:	178

	Roots:	179

	Roots:	180

	Roots:	181

	Roots:	182

	Roots:	183

	Roots:	184

	Roots:	185

	Roots:	186

	Roots:	187

	Version:	31

	About:	"interface for toWKT"

	InstallScript:	188

	UninstallScript:	189

)



(List.2

	Child:	3

	Child:	60

	Child:	138

)



(AVDLog.3

	Name:	"toWKT.mainGUI"

	X:	17

	Y:	47

	W:	481

	H:	326

	ConstrainedControlNames:	4

	ConstrainedControlNames:	5

	ConstrainedControlNames:	6

	ConstrainedControlNames:	7

	ConstrainedControlNames:	8

	ConstrainedControlNames:	9

	ConstrainedControlNames:	10

	Constraints:	11

	Constraints:	12

	Constraints:	13

	Constraints:	14

	Constraints:	15

	Constraints:	16

	Constraints:	17

	Server:	18

	ControlPanel:	19

	Title:	"GUI for toWKT"

	EscapeEnabled:	1

	Resizable:	1

	AlwaysOnTop:	1

	HasTitleBar:	1

	Closeable:	1

	Open:	"toWKT.openMainDialog"

	DefaultButton:	59

)



(AVStr.4

	S:	"refreshButton"

)



(AVStr.5

	S:	"aLabelButton14"

)



(AVStr.6

	S:	"executeMain"

)



(AVStr.7

	S:	"aLabelButton18"

)



(AVStr.8

	S:	"aboutButton"

)



(AVStr.9

	S:	"aLabelButton2"

)



(AVStr.10

	S:	"aWKT3"

)



(Numb.11

	N:	85.00000000000000

)



(Numb.12

	N:	85.00000000000000

)



(Numb.13

	N:	85.00000000000000

)



(Numb.14

	N:	85.00000000000000

)



(Numb.15

	N:	85.00000000000000

)



(Numb.16

	N:	85.00000000000000

)



(Numb.17

	N:	85.00000000000000

)



(Nil.18

)



(CPanel.19

	Child:	20

	Child:	21

	Child:	23

	Child:	33

	Child:	43

	Child:	44

	Child:	45

	Child:	46

	Child:	47

	Child:	48

	ResBox:	49

	ResBox:	50

	ResBox:	51

	ResBox:	52

	ResBox:	53

	ResBox:	54

	ResBox:	55

	ResBox:	56

	ResBox:	57

	ResBox:	58

	Listening:	1

)



(LButn.20

	InternalName:	"refreshButton"

	Help:	"Refresh the listbox values from active themes"

	Label:	"Refresh"

	Click:	"toWKT.setListbox"

)



(AVLBox.21

	InternalName:	"aListBox2"

	NextControl:	18

	ContentKind:	4

	Constraints:	0x55

	ColumnCount:	1

	HorizontalScroll:	1

	Listening:	1

	VerticalScroll:	1

	Select:	"toWKT.LBSelect"

	SelectionStyle:	22

)



(AVEnum.22

	Name:	"LISTBOX_SELECTION_MULTIRANGE"

)



(CPanel.23

	InternalName:	"aControlPanel1"

	Child:	24

	Child:	26

	Child:	28

	Constraints:	0x55

	ResBox:	30

	ResBox:	31

	ResBox:	32

	Label:	"MySQL connect properties (if unsure leave default)"

	VisibleBorder:	1

	Listening:	1

)



(TextLine.24

	InternalName:	"textServer"

	Text:	"localhost"

	Label:	"Server Address :"

	Constraints:	0x55

	Listening:	1

	TextType:	25

	NextControl:	18

)



(AVEnum.25

	Name:	"TEXTLINE_TYPE_ALL"

)



(TextLine.26

	InternalName:	"textUser"

	Text:	"root"

	Label:	"User :"

	Constraints:	0x55

	Listening:	1

	TextType:	27

	NextControl:	18

)



(AVEnum.27

	Name:	"TEXTLINE_TYPE_ALL"

)



(TextLine.28

	InternalName:	"textPassword"

	Text:	"root"

	Label:	"Password:"

	Constraints:	0x55

	Listening:	1

	TextType:	29

	NextControl:	18

)



(AVEnum.29

	Name:	"TEXTLINE_TYPE_ALL"

)



(RectD.30

	Left:	5.00000000000000

	Top:	40.00000000000000

	Right:	225.00000000000000

	Bottom:	20.00000000000000

)



(RectD.31

	Left:	236.00000000000000

	Top:	40.00000000000000

	Right:	333.00000000000000

	Bottom:	20.00000000000000

)



(RectD.32

	Left:	338.00000000000000

	Top:	39.00000000000000

	Right:	457.00000000000000

	Bottom:	19.00000000000000

)



(CPanel.33

	InternalName:	"aControlPanel8"

	Child:	34

	Child:	35

	Child:	37

	Child:	38

	Constraints:	0x55

	ResBox:	39

	ResBox:	40

	ResBox:	41

	ResBox:	42

	Label:	"Export to raster format: (optional)"

	VisibleBorder:	1

	Listening:	1

)



(AVCBox.34

	InternalName:	"aCheckBox12"

	Help:	"Convert the BMP to PNG"

	Listening:	1

	Label:	"PNG"

	Constraints:	0x55

)



(TextLine.35

	InternalName:	"aTextLine13"

	Label:	"Converter location:"

	Constraints:	0x55

	Listening:	1

	TextType:	36

	NextControl:	18

)



(AVEnum.36

	Name:	"TEXTLINE_TYPE_ALL"

)



(LButn.37

	InternalName:	"aLabelButton14"

	Help:	"Locate the bmp2png.exe for the conversion of the raster format."

	Label:	"..."

	Click:	"toWKT.fileDialogConverter"

)



(AVCBox.38

	InternalName:	"aCheckBox15"

	Help:	"Export raster in BMP format"

	Listening:	1

	Label:	"BMP"

	Constraints:	0x55

)



(RectD.39

	Left:	63.00000000000000

	Top:	36.00000000000000

	Right:	113.00000000000000

	Bottom:	16.00000000000000

)



(RectD.40

	Left:	123.00000000000000

	Top:	37.00000000000000

	Right:	430.00000000000000

	Bottom:	17.00000000000000

)



(RectD.41

	Left:	435.00000000000000

	Top:	36.00000000000000

	Right:	459.00000000000000

	Bottom:	17.00000000000000

)



(RectD.42

	Left:	7.00000000000000

	Top:	36.00000000000000

	Right:	57.00000000000000

	Bottom:	16.00000000000000

)



(TextBox.43

	InternalName:	"infoText"

	Listening:	1

	ReadOnly:	1

	Text:	"Click on the TOP ROW for info on each parameter.  To change a parameter value : click on a cell in lower rows. "

	Constraints:	0x55

	VerticalScroll:	1

	NextControl:	18

)



(LButn.44

	InternalName:	"executeMain"

	Help:	"Export to GML (experimental)"

	Label:	"GML test"

	Click:	"toWKT.GML"

)



(LButn.45

	InternalName:	"aLabelButton18"

	Help:	"Exit this dialog without creating anything"

	Label:	"Close"

	Click:	"toWKT.closeDialog"

)



(LButn.46

	InternalName:	"aboutButton"

	Label:	"instruction"

	Click:	"toWKT.aboutClick"

)



(LButn.47

	InternalName:	"aLabelButton2"

	Help:	"Export to SVG Format"

	Label:	"SVG test"

	Click:	"toWKT.toSVG"

)



(LButn.48

	InternalName:	"aWKT3"

	Help:	"Export to MySQL dumpfile"

	Label:	"Export"

	Click:	"toWKT.tomysql3"

)



(RectD.49

	Left:	414.00000000000000

	Top:	150.00000000000000

	Right:	474.00000000000000

	Bottom:	126.00000000000000

)



(RectD.50

	Left:	8.00000000000000

	Top:	269.00000000000000

	Right:	410.00000000000000

	Bottom:	119.00000000000000

)



(RectD.51

	Left:	8.00000000000000

	Top:	68.00000000000000

	Right:	474.00000000000000

	Bottom:	21.00000000000000

)



(RectD.52

	Left:	8.00000000000000

	Top:	115.00000000000000

	Right:	474.00000000000000

	Bottom:	70.00000000000000

)



(RectD.53

	Left:	8.00000000000000

	Top:	320.00000000000000

	Right:	413.00000000000000

	Bottom:	267.00000000000000

)



(RectD.54

	Left:	414.00000000000000

	Top:	211.00000000000000

	Right:	474.00000000000000

	Bottom:	189.00000000000000

)



(RectD.55

	Left:	416.00000000000000

	Top:	318.00000000000000

	Right:	474.00000000000000

	Bottom:	294.00000000000000

)



(RectD.56

	Left:	411.00000000000000

	Top:	27.00000000000000

	Right:	472.00000000000000

	Bottom:	7.00000000000000

)



(RectD.57

	Left:	414.00000000000000

	Top:	186.00000000000000

	Right:	474.00000000000000

	Bottom:	164.00000000000000

)



(RectD.58

	Left:	414.00000000000000

	Top:	271.00000000000000

	Right:	474.00000000000000

	Bottom:	230.00000000000000

)



(Nil.59

)



(AVDLog.60

	Name:	"toWKT.dataGUI"

	X:	22

	Y:	48

	W:	702

	H:	343

	ConstrainedControlNames:	61

	ConstrainedControlNames:	62

	ConstrainedControlNames:	63

	ConstrainedControlNames:	64

	Constraints:	65

	Constraints:	66

	Constraints:	67

	Constraints:	68

	Server:	18

	ControlPanel:	69

	Title:	"Coverage Data Setting"

	EscapeEnabled:	1

	Modal:	1

	Resizable:	1

	AlwaysOnTop:	1

	HasTitleBar:	1

	Closeable:	1

	Open:	"toWKT.dummy"

	DefaultButton:	137

)



(AVStr.61

	S:	"aLabelButton41"

)



(AVStr.62

	S:	"aLabelButton42"

)



(AVStr.63

	S:	"aSelAll"

)



(AVStr.64

	S:	"aDeselAll"

)



(Numb.65

	N:	85.00000000000000

)



(Numb.66

	N:	85.00000000000000

)



(Numb.67

	N:	85.00000000000000

)



(Numb.68

	N:	85.00000000000000

)



(CPanel.69

	Child:	70

	Child:	71

	Child:	72

	Child:	73

	Child:	74

	Child:	102

	Child:	116

	ResBox:	130

	ResBox:	131

	ResBox:	132

	ResBox:	133

	ResBox:	134

	ResBox:	135

	ResBox:	136

	Listening:	1

)



(RButn.70

	InternalName:	"intRadio"

	Constraints:	0x55

	Listening:	1

	Label:	"Use internal attributes data in this project"

	Click:	"toWKT.dataRadio"

)



(RButn.71

	InternalName:	"extRadio"

	Constraints:	0x55

	Listening:	1

	Label:	"Use external MySQL database for coverage"

	Click:	"toWKT.dataRadio"

)



(LButn.72

	InternalName:	"aLabelButton41"

	Label:	"Apply"

	Click:	"toWKT.applyDataDialog"

)



(LButn.73

	InternalName:	"aLabelButton42"

	Label:	"Cancel"

	Click:	"toWKT.closeDialog"

)



(CPanel.74

	InternalName:	"extPanel"

	Disabled:	1

	Child:	75

	Child:	77

	Child:	79

	Child:	81

	Child:	83

	Child:	85

	Child:	87

	Child:	89

	Child:	91

	Constraints:	0x55

	ResBox:	93

	ResBox:	94

	ResBox:	95

	ResBox:	96

	ResBox:	97

	ResBox:	98

	ResBox:	99

	ResBox:	100

	ResBox:	101

	Label:	"."

	VisibleBorder:	1

	Listening:	1

)



(TextLine.75

	InternalName:	"textServer"

	Help:	"MySQL server address (if unsure leave default)"

	Text:	"localhost"

	Label:	"MySQL server address:"

	Constraints:	0x55

	Listening:	1

	TextType:	76

	NextControl:	18

)



(AVEnum.76

	Name:	"TEXTLINE_TYPE_ALL"

)



(TextLine.77

	InternalName:	"textUser"

	Text:	"root"

	Label:	"User:"

	Constraints:	0x55

	Listening:	1

	TextType:	78

	NextControl:	18

)



(AVEnum.78

	Name:	"TEXTLINE_TYPE_ALL"

)



(TextLine.79

	InternalName:	"textPassword"

	Text:	"password"

	Label:	"Password:"

	Constraints:	0x55

	Listening:	1

	TextType:	80

	NextControl:	18

)



(AVEnum.80

	Name:	"TEXTLINE_TYPE_ALL"

)



(TextLine.81

	InternalName:	"textDatabase"

	Text:	" "

	Label:	"Database name:"

	LabelSize:	110

	Constraints:	0x55

	Listening:	1

	TextType:	82

	NextControl:	18

)



(AVEnum.82

	Name:	"TEXTLINE_TYPE_ALL"

)



(TextLine.83

	InternalName:	"textTable"

	Text:	" "

	Label:	"Table name:"

	LabelSize:	110

	Constraints:	0x55

	Listening:	1

	TextType:	84

	NextControl:	85

)



(AVEnum.84

	Name:	"TEXTLINE_TYPE_ALL"

)



(TextLine.85

	InternalName:	"textLon"

	Text:	" "

	Label:	"Longitude field:"

	LabelSize:	110

	Constraints:	0x55

	Listening:	1

	TextType:	86

	NextControl:	18

)



(AVEnum.86

	Name:	"TEXTLINE_TYPE_ALL"

)



(TextLine.87

	InternalName:	"textLat"

	Text:	" "

	Label:	"Latitude field:"

	LabelSize:	110

	Constraints:	0x55

	Listening:	1

	TextType:	88

	NextControl:	18

)



(AVEnum.88

	Name:	"TEXTLINE_TYPE_ALL"

)



(TextLine.89

	InternalName:	"textFields"

	Text:	" "

	Label:	"Field(s) name for data:"

	LabelSize:	110

	Constraints:	0x55

	Listening:	1

	TextType:	90

	NextControl:	18

)



(AVEnum.90

	Name:	"TEXTLINE_TYPE_ALL"

)



(TextLine.91

	InternalName:	"textIDField"

	Text:	" "

	Label:	"Field for ID:"

	LabelSize:	110

	Constraints:	0x55

	Listening:	1

	TextType:	92

	NextControl:	18

)



(AVEnum.92

	Name:	"TEXTLINE_TYPE_ALL"

)



(RectD.93

	Left:	9.00000000000000

	Top:	35.00000000000000

	Right:	317.00000000000000

	Bottom:	15.00000000000000

)



(RectD.94

	Left:	7.00000000000000

	Top:	58.00000000000000

	Right:	151.00000000000000

	Bottom:	38.00000000000000

)



(RectD.95

	Left:	159.00000000000000

	Top:	58.00000000000000

	Right:	317.00000000000000

	Bottom:	38.00000000000000

)



(RectD.96

	Left:	6.00000000000000

	Top:	82.00000000000000

	Right:	317.00000000000000

	Bottom:	62.00000000000000

)



(RectD.97

	Left:	6.00000000000000

	Top:	105.00000000000000

	Right:	317.00000000000000

	Bottom:	85.00000000000000

)



(RectD.98

	Left:	6.00000000000000

	Top:	128.00000000000000

	Right:	317.00000000000000

	Bottom:	108.00000000000000

)



(RectD.99

	Left:	6.00000000000000

	Top:	150.00000000000000

	Right:	317.00000000000000

	Bottom:	130.00000000000000

)



(RectD.100

	Left:	6.00000000000000

	Top:	173.00000000000000

	Right:	317.00000000000000

	Bottom:	153.00000000000000

)



(RectD.101

	Left:	6.00000000000000

	Top:	196.00000000000000

	Right:	317.00000000000000

	Bottom:	176.00000000000000

)



(CPanel.102

	InternalName:	"intPanel"

	Child:	103

	Child:	105

	Child:	106

	Child:	107

	Child:	108

	Child:	109

	Constraints:	0x55

	ResBox:	110

	ResBox:	111

	ResBox:	112

	ResBox:	113

	ResBox:	114

	ResBox:	115

	Label:	"."

	VisibleBorder:	1

	Listening:	1

)



(AVLBox.103

	InternalName:	"fieldbox"

	Help:	"Select field for feature attribute data"

	NextControl:	18

	ContentKind:	4

	Constraints:	0x55

	ColumnCount:	1

	HorizontalScroll:	1

	Listening:	1

	VerticalScroll:	1

	Select:	"toWKT.dataSelect"

	SelectionStyle:	104

)



(AVEnum.104

	Name:	"LISTBOX_SELECTION_MULTIRANGE"

)



(TextLabel.105

	InternalName:	"aTextLabel94"

	Constraints:	0x55

	Label:	"Shift+click for multi selection"

	Listening:	1

)



(LButn.106

	InternalName:	"aSelAll"

	Label:	"select all"

	Click:	"toWKT.dataSelectAll"

)



(LButn.107

	InternalName:	"aDeselAll"

	Label:	"deselect all"

	Click:	"toWKT.dataSelectAll"

)



(AVCBBox.108

	InternalName:	"aComboBox2"

	Help:	"Field for title of the feature"

	NextControl:	18

	ContentKind:	4

	Constraints:	0x55

	Listening:	1

	Label:	"Field for ID:"

)



(TextLabel.109

	InternalName:	"aTextLabel4"

	Constraints:	0x55

	Label:	"Field(s) name for data :"

	Listening:	1

)



(RectD.110

	Left:	14.00000000000000

	Top:	147.00000000000000

	Right:	246.00000000000000

	Bottom:	27.00000000000000

)



(RectD.111

	Left:	14.00000000000000

	Top:	165.00000000000000

	Right:	239.00000000000000

	Bottom:	151.00000000000000

)



(RectD.112

	Left:	14.00000000000000

	Top:	188.00000000000000

	Right:	83.00000000000000

	Bottom:	168.00000000000000

)



(RectD.113

	Left:	94.00000000000000

	Top:	188.00000000000000

	Right:	163.00000000000000

	Bottom:	168.00000000000000

)



(RectD.114

	Left:	15.00000000000000

	Top:	299.00000000000000

	Right:	243.00000000000000

	Bottom:	195.00000000000000

)



(RectD.115

	Left:	14.00000000000000

	Top:	26.00000000000000

	Right:	239.00000000000000

	Bottom:	12.00000000000000

)



(CPanel.116

	InternalName:	"extPanel2"

	Child:	117

	Child:	118

	Child:	120

	Child:	121

	Child:	123

	Constraints:	0x55

	ResBox:	125

	ResBox:	126

	ResBox:	127

	ResBox:	128

	ResBox:	129

	Label:	"Options for external database:"

	VisibleBorder:	1

	Listening:	1

)



(AVCBox.117

	InternalName:	"labelCheck"

	Listening:	1

	Label:	"Label feature"

	Constraints:	0x55

)



(TextLine.118

	InternalName:	"textLabelField"

	Label:	"using field :"

	Constraints:	0x55

	Listening:	1

	TextType:	119

	NextControl:	18

)



(AVEnum.119

	Name:	"TEXTLINE_TYPE_ALL"

)



(AVCBBox.120

	InternalName:	"comboLegendType"

	NextControl:	18

	ContentKind:	4

	Constraints:	0x55

	Listening:	1

	Label:	"Legend Type:"

)



(TextLine.121

	InternalName:	"textClassFields"

	Help:	"Use a comma to separate multi fields"

	Label:	"Classification field(s):"

	LabelSize:	106

	Constraints:	0x55

	Listening:	1

	TextType:	122

	NextControl:	18

)



(AVEnum.122

	Name:	"TEXTLINE_TYPE_ALL"

)



(TextLine.123

	InternalName:	"textClassNum"

	Text:	"0"

	Label:	"Number of classes:"

	LabelSize:	105

	Constraints:	0x55

	Listening:	1

	TextType:	124

	NextControl:	18

)



(AVEnum.124

	Name:	"TEXTLINE_TYPE_ALL"

)



(RectD.125

	Left:	7.00000000000000

	Top:	36.00000000000000

	Right:	95.00000000000000

	Bottom:	18.00000000000000

)



(RectD.126

	Left:	94.00000000000000

	Top:	40.00000000000000

	Right:	315.00000000000000

	Bottom:	20.00000000000000

)



(RectD.127

	Left:	7.00000000000000

	Top:	63.00000000000000

	Right:	227.00000000000000

	Bottom:	45.00000000000000

)



(RectD.128

	Left:	7.00000000000000

	Top:	85.00000000000000

	Right:	315.00000000000000

	Bottom:	65.00000000000000

)



(RectD.129

	Left:	7.00000000000000

	Top:	108.00000000000000

	Right:	152.00000000000000

	Bottom:	88.00000000000000

)



(RectD.130

	Left:	10.00000000000000

	Top:	28.00000000000000

	Right:	243.00000000000000

	Bottom:	4.00000000000000

)



(RectD.131

	Left:	349.00000000000000

	Top:	27.00000000000000

	Right:	591.00000000000000

	Bottom:	3.00000000000000

)



(RectD.132

	Left:	286.00000000000000

	Top:	335.00000000000000

	Right:	357.00000000000000

	Bottom:	311.00000000000000

)



(RectD.133

	Left:	286.00000000000000

	Top:	306.00000000000000

	Right:	357.00000000000000

	Bottom:	282.00000000000000

)



(RectD.134

	Left:	365.00000000000000

	Top:	220.00000000000000

	Right:	695.00000000000000

	Bottom:	17.00000000000000

)



(RectD.135

	Left:	22.00000000000000

	Top:	337.00000000000000

	Right:	279.00000000000000

	Bottom:	20.00000000000000

)



(RectD.136

	Left:	366.00000000000000

	Top:	337.00000000000000

	Right:	694.00000000000000

	Bottom:	222.00000000000000

)



(Nil.137

)



(AVDLog.138

	Name:	"toWKT.linkGUI"

	X:	27

	Y:	52

	W:	345

	H:	192

	ConstrainedControlNames:	139

	ConstrainedControlNames:	140

	Constraints:	141

	Constraints:	142

	Server:	143

	ControlPanel:	144

	Title:	"Features link setting"

	EscapeEnabled:	1

	Resizable:	1

	AlwaysOnTop:	1

	HasTitleBar:	1

	Closeable:	1

	DefaultButton:	158

)



(AVStr.139

	S:	"aLabelButton23"

)



(AVStr.140

	S:	"aLabelButton24"

)



(Numb.141

	N:	85.00000000000000

)



(Numb.142

	N:	85.00000000000000

)



(Nil.143

)



(CPanel.144

	Child:	145

	Child:	146

	Child:	147

	Child:	148

	Child:	149

	Child:	151

	ResBox:	152

	ResBox:	153

	ResBox:	154

	ResBox:	155

	ResBox:	156

	ResBox:	157

	Listening:	1

)



(RButn.145

	InternalName:	"intLinkRadio"

	Constraints:	0x55

	Listening:	1

	Label:	"Internal link (only if Data are exported from this project)"

	Click:	"toWKT.linkRadio"

)



(RButn.146

	InternalName:	"extLinkRadio"

	Constraints:	0x55

	Listening:	1

	Label:	"Custom file / URL"

	Click:	"toWKT.linkRadio"

)



(LButn.147

	InternalName:	"aLabelButton23"

	Label:	"Cancel"

	Click:	"toWKT.closeDialog"

)



(LButn.148

	InternalName:	"aLabelButton24"

	Label:	"Apply"

	Click:	"toWKT.applyLinkDialog"

)



(TextLine.149

	InternalName:	"extLinkText"

	Text:	"http://domain.org/file.php?ID="

	Label:	"URL:"

	Constraints:	0x55

	Listening:	1

	TextType:	150

	NextControl:	143

)



(AVEnum.150

	Name:	"TEXTLINE_TYPE_ALL"

)



(TextLabel.151

	InternalName:	"aTextLabel26"

	Constraints:	0x55

	Label:	"for local file use : \"filename.ext?IDFieldName=\""

	Listening:	1

)



(RectD.152

	Left:	29.00000000000000

	Top:	36.00000000000000

	Right:	313.00000000000000

	Bottom:	16.00000000000000

)



(RectD.153

	Left:	30.00000000000000

	Top:	79.00000000000000

	Right:	151.00000000000000

	Bottom:	51.00000000000000

)



(RectD.154

	Left:	35.00000000000000

	Top:	171.00000000000000

	Right:	100.00000000000000

	Bottom:	144.00000000000000

)



(RectD.155

	Left:	254.00000000000000

	Top:	173.00000000000000

	Right:	319.00000000000000

	Bottom:	146.00000000000000

)



(RectD.156

	Left:	53.00000000000000

	Top:	97.00000000000000

	Right:	328.00000000000000

	Bottom:	77.00000000000000

)



(RectD.157

	Left:	85.00000000000000

	Top:	118.00000000000000

	Right:	320.00000000000000

	Bottom:	100.00000000000000

)



(Nil.158

)



(Nil.159

)



(List.160

	Child:	161

)



(Butn.161

	Icon:	162

	Click:	"toWKT.Script1"

)



(AVIcon.162

	Name:	"DiamondBlue"

	Res:	"Icons.DiamondBlue"



)



(Script.163

	Name:	"toWKT.aboutClick"

	SourceCode:	"str=\"Before exporting, make sure the map units are set for the active view and make all layers you wish to export active.\"\nstr= str + nl + \"(shift+click for multiple layer selections)\" \n\nstr= str + nl + nl+ \"The large listbox contains the names of settings to be exported (the top row) and below this the settings for each layer.\"\nstr= str + nl + \"For information about the settings, click on their names.  You can change settings by clicking on them and making changes in the popup dialogs, then closing those d

ialogs. \"\n\nstr= str + nl+nl + \"When the settings are complete, click \"\"Export\"\".\"\nstr= str + nl+nl + \"This utility is distributed under the terms of the GNU LGPL, see: http://www.gnu.org/.\"\nmsgbox.report(str,\"Instruction\")"

)



(Script.164

	Name:	"toWKT.applyDataDialog"

	SourceCode:	"theMainDia = av.FindDialog(\"toWKT.mainGUI\")\ntheLB = theMainDia.FindByName(\"aListBox2\")\ntheLinkDia = self.GetDialog\ntheER = theLinkDia.FindByName(\"extRadio\")\ntheIP = theLinkDia.FindByName(\"intPanel\")\ntheEP = theLinkDia.FindByName(\"extPanel\")\n\ntheLB.SetCurrentValue(theER.IsSelected)\nirow = theLB.GetCurrentRow\nicol = theLB.GetCurrentColumn\nif (theER.IsSelected) then\n  tServ=theLinkDia.FindByName(\"textServer\").GetText\n  tUser=theLinkDia.FindByName(\"textUser\").GetText\n  tPass=theLinkDia.FindByName(\"textPassword\"

).GetText\n  tDb=theLinkDia.FindByName(\"textDatabase\").GetText\n  tTab=theLinkDia.FindByName(\"textTable\").GetText\n  tLon=theLinkDia.FindByName(\"textLon\").GetText\n  tLat=theLinkDia.FindByName(\"textLat\").GetText\n  tFs=theLinkDia.FindByName(\"textFields\").GetText.AsTokens(\",\")\n  tmp={tServ,tUser,tPass,tDb,tTab,tLon,tLat,tFs}  \n  theLB.goRowColumn(irow,3)\n  theLB.setCurrentValue(tmp)  \n \n  tIDF=theLinkDia.FindByName(\"textIDField\").GetText\n  theLB.goRowColumn(irow,6)\n  theLB.setCurrentValue(tIDF)   \n  \n  dlf=theLin

kDia.FindByName(\"textLabelField\").GetText  'for NameField\n  theLB.goRowColumn(irow,7)\n  theLB.setCurrentValue(dlf)\n  \n  dlc=theLinkDia.FindByName(\"labelCheck\").IsSelected\n  theLB.goRowColumn(irow,8)\n  theLB.setCurrentValue(dlc)\n\n  dlt=theLinkDia.FindByName(\"comboLegendType\").GetCurrentValue.AsString\n  theLB.goRowColumn(irow,9)\n  theLB.setCurrentValue(dlt)  \n    \n  dcn=theLinkDia.FindByName(\"textClassNum\").GetText.AsNumber\n  theLB.goRowColumn(irow,10)\n  theLB.setCurrentValue(dcn)  \n\n  dcf=theLinkDia.FindByNa

me(\"textClassFields\").GetText.AsTokens(\",\")\n  str=\"\"\n  for each fnm in dcf\n    str = str ++ fnm.AsString\n  end\n  theLB.goRowColumn(irow,12)\n  theLB.setCurrentValue(str)  \n    \nelse\n  theLB.goRowColumn(irow,3)\n  theLB.setCurrentValue(theLinkDia.FindByName(\"fieldbox\").GetSelection)\n  theLB.goRowColumn(irow,6)\n  theLB.setCurrentValue(theLinkDia.FindByName(\"aComboBox2\").getCurrentValue.GetName)\nend\nlbcc=theLB.GetColumnCount\ntheLB.fitColumns(0..lbcc,false)\ntheLB.GoColumn(3)\ntheLB.SetColumnWidth(0)\ntheLB.GoColumn

(5)\ntheLB.SetColumnWidth(0)\ntheLB.goRowColumn(irow,icol)\n\n\nSELF.GetDialog.Close"

)



(Script.165

	Name:	"toWKT.applyLinkDialog"

	SourceCode:	"theMainDia = av.FindDialog(\"toWKT.mainGUI\")\ntheLB = theMainDia.FindByName(\"aListBox2\")\ntheLinkDia = self.GetDialog\ntheER = theLinkDia.FindByName(\"extLinkRadio\")\ntheET = theLinkDia.FindByName(\"extLinkText\")\ntheLB.SetCurrentValue(theER.IsSelected)\n\nirow = theLB.GetCurrentRow\nicol = theLB.GetCurrentColumn\ntheLB.goRowColumn(irow,icol+1)\nif (theER.IsSelected) then\n  theLB.setCurrentValue(theET.GetText)\n  ' must add a link field\nelse\n  theLB.setCurrentValue(\"\")\nend\n\nSELF.GetDialog.Close"

)



(Script.166

	Name:	"toWKT.closeDialog"

	SourceCode:	"SELF.GetDialog.Close"

)



(Script.167

	Name:	"toWKT.createTableLayer3"

	SourceCode:	"    LyrTabStr = \"CREATE TABLE Layers\" + nl \n      + \"     (\" + nl \n      + \"     LayerID INT NOT NULL auto_increment,\" + nl \n      + \"     TableName CHAR(50),\" + nl \n      + \"     Shape CHAR(10),\" + nl \n      + \"     Name CHAR (50),\" + nl \n      + \"     FillColor CHAR(17),\" + nl \n      + \"     StrokeColor CHAR(17),\" + nl \n      + \"     StrokeWidth REAL,\" + nl \n      + \"     MinScale INT,\" + nl \n      + \"     MaxScale INT,\" + nl \n      + \"     HasAttributes TINYINT,\" + nl \n      + \"     NameField CHAR(50),\" 

+ nl \n      + \"     LabelColor CHAR(15),\" + nl \n      + \"     LabelSize INT,\" + nl \n      + \"     IDType Char(10),\" + nl \n      + \"     IDField Char(50),\" + nl \n      + \"     URL Char(70),\" + nl \n      + \"     UseLabels TINYINT,\" + nl \n      + \"     IsExternal TINYINT,\" + nl \n      + \"     LegendType Char(50),\" + nl \n      + \"     ClassificationField Char(50),\" + nl       \n      + \"     ClassificationType Char(50),\" + nl       \n      + \"     ClassesCount INT,\" + nl \n      + \"     SymbolType Char(50),\" + nl 

     \n      + \"     SymbolSize REAL,\" + nl \n      + \"     ColorList BLOB,\" + nl\n      + \"     Abstract CHAR(250),\" + nl            \n      + \"     PRIMARY KEY (LayerID)\" + nl \n      + \"     )\\g\" + nl\n      \n    return LyrTabStr\n"

)



(Script.168

	Name:	"toWKT.createThemesTable"

	SourceCode:	"theThemeName=SELF.Get(0).AsString\nthemePeriodIndex=theThemeName.Indexof(\".\")\nif (not(themePeriodIndex=-1)) then\n  theThemeName=theThemeName.Left(themePeriodIndex)\nend\ntheThemeNameTable=theThemeName.Substitute(\" \", \"_\")\nexportAttributes=true\nIsExternal= SELF.Get(2)\ntheLay =_theView.GetActiveThemes\ntheThm = theLay.Get(_themeStep)\nFList = SELF.Get(3)\n            \n        str1=\"CREATE TABLE \" + theThemeNameTable + nl + \"     (\" + nl +\"     FeatureID INT NOT NULL auto_increment,\"\n        str2=\"     Geometry LONG

BLOB,\" + nl + \"     XMin REAL,\" + nl + \"     XMax REAL,\" + nl + \"     YMin REAL,\" + nl + \"     YMax REAL,\"\n        str3=\"\"\n        if (IsExternal=false) then\n            'msgbox.info(FList.Count.AsString,theThemeNameTable)\n            for each theFN in FList\n                if (theFN.Is(String)=true) then \n                  theFieldName=theFN\n                  theField=theThm.GetFTab.FindField(theFN)  \n                elseif (theFN.Is(Field)=true) then\n                  theField=theFN\n                  theF

ieldName=theFN.GetName.AsString\n                end               \n                if (not((theFieldName=\"shape\")or(theFieldName=\"longitude\")or(theFieldName=\"latitude\"))) then\n                    fieldType=theField.getType.AsString\n                    fieldWidth=theField.GetWidth.AsString\n                    if (fieldType=\"FIELD_BYTE\") then\n                        fieldType=\"TINYINT\"\n                    elseif (fieldType=\"FIELD_CHAR\") then\n                        fieldType=\"CHAR(\" + fieldWidth + \")\"\n       

             elseif (fieldType=\"FIELD_DATE\") then\n                        fieldType=\"DATE\"\n                    elseif (fieldType=\"FIELD_DECIMAL\") then\n                        fieldType=\"DECIMAL\"\n                    elseif (fieldType=\"FIELD_DOUBLE\") then\n                        fieldType=\"DOUBLE\"\n                    elseif (fieldType=\"FIELD_FLOAT\") then\n                        fieldType=\"FLOAT\"\n                    elseif (fieldType=\"FIELD_ISODATE\") then\n                        fieldType=\"DATE\"\n              

      elseif (fieldType=\"FIELD_ISODATETIME\") then\n                        fieldType=\"DATETIME\"\n                    elseif (fieldType=\"FIELD_ISOTIME\") then\n                        fieldType=\"TIME\"\n                    elseif (fieldType=\"FIELD_LOGICAL\") then\n                        fieldType=\"TINYINT\"\n                    elseif (fieldType=\"FIELD_MONEY\") then\n                        fieldType=\"CHAR\"\n                    elseif (fieldType=\"FIELD_LONG\") then\n                        fieldType=\"BIGINT\"\n             

       elseif (fieldType=\"FIELD_SHORT\") then\n                        fieldType=\"SMALLINT\"\n                    elseif (fieldType=\"FIELD_BLOB\") then\n                        fieldType=\"BLOB\"\n                    elseif (fieldType=\"FIELD_VCHAR\") then\n                        fieldType=\"VARCHAR(\" + fieldWidth + \")\"\n                    end\n                    str3=str3+ nl+ 9.AsChar + theFieldName + \" \" + fieldType + \",\"                  \n                end\n            end\n        end\n        str4=\"     PRIMARY KE

Y(FeatureID)\" + nl + \"     )\\g\" + nl\n\n        str=str1+str2+str3+str4\n        return str\n\n\n\n"

)



(Script.169

	Name:	"toWKT.dataRadio"

	SourceCode:	"theDia = self.GetDialog\ntheIP = theDia.FindByName(\"intPanel\")\ntheIR = theDia.FindByName(\"intRadio\")\ntheEP = theDia.FindByName(\"extPanel\")\ntheEP2 = theDia.FindByName(\"extPanel2\")\n\nltlist = {\"single symbol\",\"unique value\",\"graduated color\",\"graduated symbol\",\"dot symbol\",\"chart symbol\"}\ntheCLT = theDia.FindByName(\"comboLegendType\")\ntheCLT.DefineFromList(ltlist)\n\ntheMainDia = av.FindDialog(\"toWKT.mainGUI\")\ntheLB = theMainDia.FindByName(\"aListBox2\")\nirow = theLB.GetCurrentRow\n\nif (self.GetName=\"intRadio\") then\n

  self.select\n  theIP.setEnabled(true)\n  theEP.setEnabled(false)\n  theEP2.setEnabled(false)\n  av.Run(\"toWKT.dataSelect\",SELF)\nend\nif (self.GetName=\"extRadio\") then\n'only for points\n  if (theLB.getList.Get(irow).Get(1)=\"Point\") then\n    self.select\n    theIP.setEnabled(false)\n    theEP.setEnabled(true)\n    theEP2.setEnabled(true)\n  else\n    msgbox.info(\"External data only for Point shape\",\"\")  \n    theIR.select\n  end\nend\n\n\n"

)



(Script.170

	Name:	"toWKT.dataSelect"

	SourceCode:	"alb = SELF.GetDialog.FindByName(\"fieldbox\")\nacb = SELF.GetDialog.FindByName(\"aComboBox2\")\nacv = acb.GetCurrentValue\nacb.DefineFromList(alb.GetSelection)\npci=-1\nif (Not(acv=nil)) then\n  pci = acb.GetList.FindByValue(acv)\nend\nif (Not(pci=-1)) then\n  acb.GoRow(pci)\nend\n"

)



(Script.171

	Name:	"toWKT.dataSelectAll"

	SourceCode:	"theDia=SELF.GetDialog\ntheLB=theDia.FindByName(\"fieldbox\")  \nif (Self.GetName=\"aSelAll\") then\n    arect=Rect.MakeXY(0,0,theLB.GetRowCount,theLB.GetRowCount)\n    theLB.SetSelection(arect,false)\nelse\n    arect=Rect.MakeXY(0,0,0,0)\n    theLB.SetSelection(arect,false)\nend\nav.Run(\"toWKT.dataSelect\",SELF)"

)



(Script.172

	Name:	"toWKT.dummy"

	SourceCode:	"'theView = av.GetActiveDoc\n"

)



(Script.173

	Name:	"toWKT.fileDialogConverter"

	SourceCode:	"bmp2pngFN = FileDialog.Show(\"*.exe\",\"executable\",\"Find your bmp2png.exe file.\")\nclt=SELF.GetDialog.FindByName(\"aTextLine13\")\nclt.setText(bmp2pngFN.AsString)"

)



(Script.174

	Name:	"toWKT.filesCreated"

	SourceCode:	"'SELF is a list of filename objects\nstr=\"This Utility has generated \"+SELF.Count.setFormat(\"d\").AsString+\" files.\"\nfor each f in SELF\n  fulln = f.getFullName.AsString\n  str=str+nl+fulln\nend\nstr = str+nl+nl+\"For publishing instructions, read the readme file you downloaded with the script.\"\n\nmsgbox.report(str,\"File Generation Complete\")"

)



(Script.175

	Name:	"toWKT.GML"

	SourceCode:	"'row0: label field\n'row 1-n : theme index\n\n'col0: string : theme name\n'col1: string : theme shape\n'col2: boolean: use external data? \n'col3: list   : internal:{ fields1,fields2,..,fieldsN } \n'               external:{ server,user,pass,db,table,lon,lat,{fields1,fields2,..,fieldsN} }\n'               (this column width set to zero)\n'col4: boolean: use external link? \n'col5: string : internal: \"\"\n'               external: alinkparameter\n'               (this column width set to zero)\n'col6: string : ID field\n'c

ol7: string : a field with title or name of the feature\n'col8: boolean: label the feature using nameField?\n'col9: string : legend type\n'col10: number: number of classes in a legend\n'col11: string: classification type\n'col12: string: fields for classifications; space delimited for multifields;\n'col13: string: symbol(0) type\n'col14: number: symbol(0) size\n'col15: string: symbol(0) background color\n'col16: string: symbol(0) foreground color\n'col17: string: symbol(0) OutLine Color\n'col18: number: symbol(0) OutL

ine Width\n'col19: number: Threshold min\n'col20: number: Threshold max\n'col21: boolean:Threshold is off?\n'col22: string: comma separated list of each symbol color \n'              (this column width set to zero)\n\ntime1=Date.now\nfileList=List.Make\ntheLay =_theView.GetActiveThemes\nmyDia = SELF.getDialog\ntheLB = SELF.getDialog.FindByName(\"aListBox2\")\nLBList=theLB.GetList\n\nirow=theLB.GetCurrentRow\nicol=theLB.GetCurrentColumn\nnrow=theLB.GetRowCount\nncol=theLB.GetColumnCount\n\nif (nrow=1) then\n  msgbox.info(\"No acti

ve themes selected.\"+\"Please select themes from view first.\",\"STOP\")\n  exit\nelse\n  if(irow=0) then\n    irow=1\n  end\nend\n\ntheView=_theView\n\ntheViewName=theView.GetName\ntheViewNameFile=theViewName.Substitute(\" \", \"_\")\ntheViewNameFileBMP=theViewNameFile + \".bmp\"\ntheViewNameFileBMP=theViewNameFileBMP.asFileName\ntheViewNameFileGML=theViewNameFile+\".xml\"\ntheViewNameFileGML=theViewNameFileGML.AsFileName\n\n'convert to BMP\nbmpchk=SELF.getDialog.FindByName(\"aCheckBox15\")\nif (bmpchk.IsSelected=true) then\n  clt=SELF.Get

Dialog.FindByName(\"aTextLine13\")\n  bmp2pngFN=clt.GetText\n  system.execute(bmp2pngFN.AsString ++ theViewNameFileBMP.AsString)\n  fileList.add(theViewNameFileBMP)\nend\n\ntheScale=theView.ReturnScale\nif (theScale=0) then\n    MsgBox.Info (\"Please set view map units before exporting.  Exiting.\", \"Units not set!\")\n    exit\nend\n\ntheDir=MsgBox.Input (\"Enter the path to an existing directory where you want to put the files.\", \"Specifiy file location\", \"c:\\temp\")\nif (theDir=nil) then\n  exit\nend\ntheDir=theDir.AsFileName\n

theDir.SetCWD\n\nthePrj = theView.GetProjection\nproject_flag = thePrj.IsNull.Not  'true if projected\ntheVisExtent = theView.GetDisplay.ReturnVisExtent\n'=========================\ntheWin = theView.GetWin\ntheExtent = theWin.ReturnExtent\n\ntheX = theExtent.GetX - (_theView.GetTOCWidth + 15)\ntheY = theExtent.GetY - 31\n\nNumber.SetDefFormat( \"d.dddddddd\" )\n\ntheMaxXImage = theX\ntheMaxYImage = theY\ntheVisRect = theView.GetDisplay.ReturnVisExtent\ntheMinxView = theVisRect.GetLeft\ntheMinyView = theVisRect.GetTop\ntheMaxxVi

ew = theVisRect.GetRight\ntheMaxyView = theVisRect.GetBottom\n\ntheImageXunit = (theMaxxView - theMinxView)/theMaxXImage\ntheImageYunit = (theMaxyView - theMinyView)/theMaxYImage\n\ntheDisplay=theView.getDisplay\ntheUnits=theDisplay.getUnits\n\nNumber.SetDefFormat( \"\" )\ntheWidth=theX\ntheWidth.SetFormat(\"d\")\ntheHeight=theY\ntheHeight.SetFormat(\"d\")\ntheScale=theView.ReturnScale\ntheScale.SetFormat(\"d\")\ntheViewNameFileMySQL=theViewNameFile+\".sql\"\n\ntheProjection=thePrj.AsString\n\nGMLfile =LineFile.Make(theViewNameFileGML, 

#FILE_PERM_WRITE)\nfileList.add(theViewNameFileGML)\nGMLfile.WriteElt(\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\")\nDocElem =\"_\"+theViewNameFile.substitute(\"#\",\"_\").substitute(\"+\",\"_\")\nGMLfile.WriteElt(\"<\"+DocElem+\">\")\n'********************* SLD , ELD and GetFeature *******************\n_themeStep=0\n_themeStep.setFormat(\"d\")\nSLDs=\"<StyledLayerDescriptor>\"\nELDs=\"<ExtendedLayerDescriptor>\"\nGFs=\"<GetFeature maxFeatures=\"\"1000\"\">\"\nav.ShowStopButton\nfor each theTheme in theView.GetActiveThemes\n  TL=LBList.Get(_them

eStep+1)\n  theThemeName=TL.Get(0).AsString\n  av.ShowMsg(\"Processing \" + theThemeName +\" style...\")\n  themePeriodIndex=theThemeName.Indexof(\".\")\n  if (not(themePeriodIndex=-1)) then\n    theThemeName=theThemeName.Left(themePeriodIndex)\n  end\n  theThemeNameTable=theThemeName.Substitute(\" \", \"_\")\n  nmdLay = String.MakeBuffer(1*4) +\"<NamedLayer name=\"+ theThemeNameTable.Quote + \">\"\n	 SLDs=SLDs + nl + nmdLay\n	 SLDs=SLDs + nl + string.MakeBuffer(2*4) +\"<UserStyle>\"\n  theShape = TL.Get(1).AsString\n  theTag =theShap

e+\"Symbol\"\n  if ( (Not(theShape=\"Polygon\")) AND (Not(theShape=\"Point\")) ) then \n    theShape=\"Line\"\n    theTag =theShape+\"StringSymbol\"\n  end\n	 SLDs=SLDs + nl + string.MakeBuffer(3*4) +\"<\"+theTag+\">\"\n	 SLDs=SLDs + nl + string.MakeBuffer(4*4) +\"<Geometry>\"\n	 SLDs=SLDs + nl + string.MakeBuffer(5*4) +\"<FetchFeatureProperty name=\"+theThemeNameTable.Quote+\"/>\"\n	 SLDs=SLDs + nl + string.MakeBuffer(4*4) +\"</Geometry>\"\n  if (Not(TL.Get(16).AsString=\"NULL\")) then\n    SLDs=SLDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"

\",\"\",\"FillColor\",TL.Get(16).AsString})\n  end\n  if (Not(TL.Get(17).AsString=\"NULL\")) then\n    SLDs=SLDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"\",\"\",\"StrokeColor\",TL.Get(17).AsString})\n  end\n	 SLDs=SLDs + nl + string.MakeBuffer(3*4) +\"</\"+theTag+\">\"\n	 SLDs=SLDs + nl + string.MakeBuffer(2*4) +\"</UserStyle>\"\n	 SLDs=SLDs + nl + string.MakeBuffer(1*4) +\"</NamedLayer>\"\n\n  ELDs=ELDs + nl + nmdLay\n  ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"TableName\",theThemeNameTable})\n  ELDs=ELDs + nl + av.Run(\"toWKT.makeT

ags\",{\"\",\"\",\"Shape\",theShape.LCase})\n  ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"MinScale\",TL.Get(19).AsString})\n  ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"MaxScale\",TL.Get(20).AsString})\n  ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"HasAttributes\",1})\n  if (TL.Get(4)=true) then\n    ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"IDType\",\"server\"})\n  else\n    ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"IDType\",\"local\"})\n  end\n  ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"NameF

ield\",TL.Get(7).GetName.AsString})\n  ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"IDField\",TL.Get(6).GetName.AsString})\n  ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"URL\",TL.Get(5).AsString})\n  ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"LegendType\",TL.Get(9).AsString})\n  ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"ClassificationType\",TL.Get(11).AsString})\n  if (Not(TL.Get(12).AsString.Trim=\"\")) then\n    ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"ClassificationField\",TL.Get(12).AsSt

ring.Trim})\n  end\n  ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"ClassesCount\",TL.Get(10).AsString})\n  st = TL.Get(13).AsString\n  if (st=\"SYMBOL_PEN\") then\n    st=\"pen\"\n  elseif (st=\"SYMBOL_MARKER\") then\n    st=\"marker\"\n  elseif (st=\"SYMBOL_FILL\") then\n    st=\"fill\"\n  elseif (st=\"SYMBOL_TEXT\") then\n    st=\"text\"\n  elseif (st=\"SYMBOL_CHART\") then\n    st=\"chart\"\n  end\n  ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"SymbolType\",st})\n  if (Not(TL.Get(14).AsString=\"NULL\")) then\n    ELDs=ELDs + nl + av.Run

(\"toWKT.makeTags\",{\"\",\"\",\"SymbolSize\",TL.Get(14).SetFormat(\"d.dd\").AsString})    \n  end\n  if (Not(TL.Get(18).AsString=\"NULL\")) then\n    ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"StrokeWidth\",TL.Get(18).AsString})\n  end\n\n  colstr=\"\"\n  for each coleur in TL.Get(22)\n    colstr=colstr++coleur\n  end\n  ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"ColorList\",colstr.trim})\n\n	 ELDs=ELDs + nl + string.MakeBuffer(1*4) +\"</NamedLayer>\"\n\n  GFs=GFs + nl + string.MakeBuffer(1*4) +	\"<Query typeName=\"+ theThemeNa

meTable.Quote +\"/>\"\n\n  _themeStep=_themeStep+1\nend\n\nSLDs=SLDs + nl + \"</StyledLayerDescriptor>\"\nGMLfile.WriteElt(SLDs)\nELDs=ELDs + nl + \"</ExtendedLayerDescriptor>\"\nGMLfile.WriteElt(ELDs)\nGFs=GFs + nl + \"</GetFeature>\"\nGMLfile.WriteElt(GFs)\n\n'********************* featureCollection *******************\n\n' ATTENZIONE : NEED ADJUSTMENT !!!!\nabc=theMinxView.AsString + \",\" +theMinyView.AsString + \" \"+theMaxxView.AsString + \",\"+theMaxyView.AsString\nGMLfile.WriteElt(\"<featureCollection>\")\ngmlS = av.Run(\"toWKT.make

Tags\",{\"\",\"boundedBy\",\"Box\",abc})\nGMLfile.WriteElt(gmlS)\n\n_themeStep=0\n_themeStep.setFormat(\"d\")\nfor each theTheme in theView.GetActiveThemes\n  TL=LBList.Get(_themeStep+1) \n  if (TL.Get(2)=true) then\n    if ((TL.Get(1)=\"Point\") and (not(project_flag))) then\n      'mySQLDumpFile.WriteElt(\"INSERT INTO ExternalLayers\" + nl + \"VALUES (\" + nl + \"     \" + _themeStep.AsString + \",\" + nl + \"     '\" +  TL.Get(3).Get(0) + \"',\" + nl + \"     '\" + TL.Get(3).Get(1) + \"',\" + nl +\"     '\" + TL.Get(3).Get(2) + \"',\" + nl + \"

     '\" + TL.Get(3).Get(3) + \"',\" + nl +\"     '\" + TL.Get(3).Get(4) + \"',\" + nl +\"     '\" + TL.Get(3).Get(5) + \"',\" + nl +\"     '\" + TL.Get(3).Get(6) + \"'\" + nl +\"     )\\g\" + nl)\n    end\n  end\n  \n  theThemeName=TL.Get(0).AsString\n    themePeriodIndex=theThemeName.Indexof(\".\")\n  if (not(themePeriodIndex=-1)) then\n    theThemeName=theThemeName.Left(themePeriodIndex)\n  end\n  theThemeNameTable=theThemeName.Substitute(\" \", \"_\")\n  theLay =_theView.GetActiveThemes\n  theThm = theLay.Get(_themeStep)\n  av.ShowMsg(\"Pr

ocessing \" + theThemeName +\" features...\")\n     \n  theFTab = theThm.GetFTab\n  shapeField = theFTab.FindField(\"Shape\")\n\n  theNumRecs = theFtab.GetNumRecords\n  sbUnit = 100/theNumRecs\n  sb = sbUnit\n\n    for each i in 0..(theNumRecs -1)\n        if ((theFtab.returnvalue(shapeField,i).Intersects(theVisExtent)) or (theFtab.returnvalue(shapeField,i).IsContainedIn(theVisExtent)))  then\n            txtOut = \"\"\n            thePrjShape = theFtab.returnvalue(shapeField,i).ReturnProjected(thePrj)\n            theShapeExt

ent=thePrjShape.ReturnExtent\n            Number.SetDefFormat( \"d.dddddddd\" )\n            i.setFormat(\"d\")\n            theShapeType=theTheme.GetSrcName.GetSubName\n\n            GMLfile.WriteElt(string.MakeBuffer(1*4)+\"<featureMember>\")\n            GMLfile.WriteElt(string.MakeBuffer(2*4)+\"<\"+theThemeNameTable+\">\")\n            tstp =i+1\n            tagindex =theThemeNameTable+\".FeatureID\"\n            tstp.SetFormat(\"d\")\n            GMLfile.WriteElt(string.MakeBuffer(3*4) + \"<\" + tagindex + \">\" + tstp.AsString +

 \"</\"+tagindex+\">\")\n            tagGeom =string.MakeBuffer(3*4) + \"<\" + theThemeNameTable + \".Geometry>\"\n            GMLfile.WriteElt(tagGeom)\n            \n            if (theShapeType.contains(\"polygon\")) then              \n                thePrjShape = thePrjShape.ReturnClipped(theVisExtent)\n                theShapeExtent=thePrjShape.ReturnExtent\n                XMin = theShapeExtent.GetLeft\n                XMax = theShapeExtent.GetRight\n                YMin = theShapeExtent.GetTop              \n         

       YMax = theShapeExtent.GetBottom\n               \n                thePolygonlist = thePrjShape.AsPolyline.Explode\n                               \n                thePolygonlistCount=thePolygonlist.count\n                if (thePolygonlistCount>1) then\n                  tagMult =string.MakeBuffer(4*4) + \"<MultiPolygon>\"\n                  GMLfile.WriteElt(tagMult)\n                end\n\n                for each poly in thePolygonList 'added\n                  'substitue commas with spaces, newlines with comm

as\n                  tsr =poly.AsString.Substitute(nl,\" \")\n                  tsr =tsr.right(tsr.count-tsr.indexOf(\" \")-1) 'removing the *Polyxxx* word\n                  tsr =tsr.right(tsr.count-tsr.indexOf(\" \")-1) 'removing parts count, which SHOULD be one\n                  tsr =tsr.right(tsr.count-tsr.indexOf(\" \")-1) 'removing number of points for each part\n                  tsr =tsr.Trim\n\n                  'CHECKING\n                  tal = tsr.substitute(\",\",\" \").AsList\n                  tac = tal.count\n 

                 tam = tac mod 2\n                  if (Not(tam=0)) then\n                    msgbox.info(\"Polygon number \"+tstp.AsString+\" has odd coordinates pair.\",\"Error\")\n                    tsr=\"ERROR\"+tsr\n                  end\n                  gmlTagList={\"\",\"\",\"\",\"\"}\n                  if (thePolygonlistCount>1) then\n                    tagMemb =string.MakeBuffer(5*4) + \"<polygonMember>\"\n                    GMLfile.WriteElt(tagMemb)\n                    gmlTagList={\"\",\"\",\"\",\"\",\"\",\"\"}\n                  

end\n                  gmlTagList.add(\"Polygon\")\n                  gmlTagList.add(\"outerBoundaryIs\")\n                  gmlTagList.add(\"LinearRing\")     \n                  gmlTagList.add(\"coordinates\") \n                  gmlTagList.add(tsr)\n                  gmlS = av.Run(\"toWKT.makeTags\",gmlTagList)\n                  GMLfile.WriteElt(gmlS)\n                  if (thePolygonlistCount>1) then\n                    tagMemb =string.MakeBuffer(5*4) + \"</polygonMember>\"\n                    GMLfile.WriteElt(tagMemb)\n  

                end                  \n                end 'added\n                if (thePolygonlistCount>1) then\n                  tagMult =string.MakeBuffer(4*4) + \"</MultiPolygon>\"\n                  GMLfile.WriteElt(tagMult)\n                end\n                tagGeom =string.MakeBuffer(3*4) + \"</\" + theThemeNameTable + \".Geometry>\"\n                GMLfile.WriteElt(tagGeom)\n            elseif (theShapeType.contains(\"arc\")) then\n                thePrjShape = thePrjShape.ReturnClipped(theVisExtent)\n        

        theShapeExtent=thePrjShape.ReturnExtent\n                XMin = theShapeExtent.GetLeft\n                XMax = theShapeExtent.GetRight\n                YMin = theShapeExtent.GetTop\n                YMax = theShapeExtent.GetBottom\n                thePList = thePrjShape.Explode\n                thePListCount=thePList.count\n                if (thePListCount>1) then\n                  tagMult =string.MakeBuffer(4*4) + \"<MultiLineString>\"\n                  GMLfile.WriteElt(tagMult)                  \n          

      end\n                for each p in thePList 'added\n                  if (p.countparts>1) then\n                    msgbox.info(\"This polyline still contains \"+p.countparts.setFormat(\"d\").AsString+\" parts\"+nl+\"There should be only one.  This feature is skipped.\",\"Error\")\n                    continue\n                  end\n                  tsr =p.AsString.Substitute(nl,\" \")\n                  tsr =tsr.right(tsr.count-tsr.indexOf(\" \")-1) 'removing the *PolyLine* word\n                  tsr =tsr.right(tsr.cou

nt-tsr.indexOf(\" \")-1) 'removing parts count, which is always one\n                  tsr =tsr.right(tsr.count-tsr.indexOf(\" \")-1) 'removing number of points for each part\n                  tsr =tsr.Trim  \n                  \n                  'CHECKING\n                  tal = tsr.substitute(\",\",\" \").AsList\n                  tac = tal.count\n                  tam = tac mod 2\n                  if (Not(tam=0)) then\n                    msgbox.info(\"Polyline number \"+tstp.AsString+\"has odd coordinates pair. Skipped

.\",\"Error\")\n                  end\n                  gmlTagList={\"\",\"\",\"\",\"\"}\n                  if (thePListCount>1) then\n                    tagMemb =string.MakeBuffer(5*4) + \"<lineStringMember>\"\n                    GMLfile.WriteElt(tagMemb)\n                    gmlTagList={\"\",\"\",\"\",\"\",\"\",\"\"}                    \n                  end\n                  gmlTagList.add(\"LineString\")\n                  gmlTagList.add(\"coordinates\") \n                  gmlTagList.add(tsr)\n                  gmlS = av.Run(\"toWKT.make

Tags\",gmlTagList)\n                  GMLfile.WriteElt(gmlS)\n                  if (thePListCount>1) then\n                    tagMemb =string.MakeBuffer(5*4) + \"</lineStringMember>\"\n                    GMLfile.WriteElt(tagMemb)\n                  end\n                end 'added\n                if (thePListCount>1) then\n                  tagMult = string.MakeBuffer(4*4) + \"</MultiLineString>\"\n                  GMLfile.WriteElt(tagMult)                  \n                end\n                tagGeom =string.MakeBuff

er(3*4) + \"</\" + theThemeNameTable + \".Geometry>\"\n                GMLfile.WriteElt(tagGeom)\n            elseif (theShapeType.contains(\"point\")) then\n                theXPos = thePrjShape.GetX\n                theYPos = thePrjShape.GetY\n                XMin = theXPos\n                XMax = theXPos\n                YMin = theYPos\n                YMax = theYPos\n                tsr = theXPos.AsString+\",\"+theYPos.AsString\n                tabstr = string.MakeBuffer(5*4)\n                tagPoint =tabstr + \"<Point><c

oordinates>\"+tsr+\"</coordinates></Point>\"\n                GMLfile.WriteElt(tagPoint)\n                tagGeom =string.MakeBuffer(3*4) + \"</\" + theThemeNameTable + \".Geometry>\"\n                GMLfile.WriteElt(tagGeom)\n            end\n\n            tagXmin =string.MakeBuffer(3*4) + \"<\" + theThemeNameTable + \".XMin>\" + XMin.AsString + \"</\" + theThemeNameTable + \".XMin>\"\n            tagXmax =string.MakeBuffer(3*4) + \"<\" + theThemeNameTable + \".XMax>\" + XMax.AsString + \"</\" + theThemeNameTable + \".XMax>\"\n        

    tagYmin =string.MakeBuffer(3*4) + \"<\" + theThemeNameTable + \".YMin>\" + YMin.AsString + \"</\" + theThemeNameTable + \".YMin>\"\n            tagYmax =string.MakeBuffer(3*4) + \"<\" + theThemeNameTable + \".YMax>\" + YMax.AsString + \"</\" + theThemeNameTable + \".YMax>\"\n            GMLfile.WriteElt(tagXmin)\n            GMLfile.WriteElt(tagXmax)\n            GMLfile.WriteElt(tagYmin)\n            GMLfile.WriteElt(tagYmax)\n\n            if (TL.Get(2)=false) then\n                fieldStep=0\n                theFields=TL.Ge

t(3)\n                for each theFN in theFields\n                  if (theFN.Is(String)=true) then \n                    theFieldName=theFN\n                    theField=theThm.GetFTab.FindField(theFN)  \n                  elseif (theFN.Is(Field)=true) then\n                    theField=theFN\n                    theFieldName=theFN.GetName.AsString\n                  end\n                  gmlFName=theFieldName.BasicTrim(\" \",\" \").Substitute(\" \", \"_\")\n                  theValue = theFtab.ReturnValueString(theField,

i)\n                  if (Not(theValue.AsString=\"\")) then\n                    tval = theValue.substitute(\"&\",\"&amp;\")\n                    tval = tval.substitute(\"#\",\"&#35;\")\n                    tval = tval.substitute(\"<\",\"&lt;\")\n                    tval = tval.substitute(\">\",\"&gt;\")\n                    tval = tval.substitute(\"%\",\"&#37;\")\n                    tagF =string.MakeBuffer(3*4) + \"<\" + theThemeNameTable + \".\"+gmlFName+\">\" + tval + \"</\" + theThemeNameTable + \".\"+gmlFName+\">\"\n                    GMLfil

e.WriteElt(tagF)\n                  end       \n                  fieldStep=fieldStep+1\n                end\n            end\n\n        tabstr = string.MakeBuffer(2*4)\n        GMLfile.WriteElt(tabstr+\"</\"+theThemeNameTable+\">\")\n        tabstr = string.MakeBuffer(1*4)\n        GMLfile.WriteElt(tabstr+\"</featureMember>\")\n            \n     end\n     av.SetStatus(sb)\n     sb = sb + sbUnit\n     \n  end\n  Number.SetDefFormat(\"d\")\n  _themeStep=_themeStep+1\n  \nend\n\nGMLfile.WriteElt(\"</featureCollection>\")\nGMLfile.WriteElt(

\"</\"+DocElem+\">\")\n\nav.ClearStatus\n\ndur=Date.now-time1\nmsgbox.info(\"Completed in \"+dur.asSeconds.asString+\" seconds\",\"Duration\")\nGMLfile.close\nav.Run(\"toWKT.filesCreated\",fileList)\n"

)



(Script.176

	Name:	"toWKT.LBSelect"

	SourceCode:	"theView = av.GetActiveDoc\nif(Not(theView.GetClass.GetClassName=\"View\")) then\n  msgbox.info(\"No View activated.\"+nl+\"Please select a View first.\",\"Notice\")\n  exit\nend\ntheLay =theView.GetActiveThemes\nmyList = List.make\n\nirow = self.GetCurrentRow\nicol = self.GetCurrentColumn\n\ninfot =self.GetDialog.FindByName(\"infoText\") \n'first row is for column label\n'if (irow=0) then\n  if (icol=0) then infot.SetText(\"This theme name\") end\n  if (icol=1) then infot.SetText(\"Shape of this theme\") end\n  if (icol=2) then infot.Se

tText(\"Attribute Data for features\"+nl+\"True : use external MySQL databases for coverage\"+nl+\"False : use data exported from this project (default)\") end\n  if (icol=4) then infot.SetText(\"Link for feature\"+nl+\"True : use External custom file / URL\"+nl+\"False : use internal link(default for internal Data)\") end\n  if (icol=6) then infot.SetText(\"Field with the ID value of the feature (used in external linking)\") end\n  if (icol=7) then infot.SetText(\"Field with the name or title of the feature\") end\n  if (icol

=8) then infot.SetText(\"Label the feature using NameField\") end\n  if (icol=9) then infot.SetText(\"Legend type for this theme\") end\n  if (icol=10) then infot.SetText(\"Number of classification for this legend\") end\n  if (icol=11) then infot.SetText(\"Classification type of this legend\") end\n  if (icol=12) then infot.SetText(\"Fields used in the classification of this legend\") end\n  if (icol=13) then infot.SetText(\"Type of the first symbol in this legend\") end\n  if (icol=14) then infot.SetText(\"Size of the first

 symbol in this legend (in points)\") end \n  if (icol=15) then infot.SetText(\"Background color of the first symbol in this legend\") end\n  if (icol=16) then infot.SetText(\"Foreground color of the first symbol in this legend\") end  \n  if (icol=17) then infot.SetText(\"Outline color of the first symbol in this legend\") end  \n  if (icol=18) then infot.SetText(\"Outline width of the first symbol in this legend\") end        \n  if (icol=19) then infot.SetText(\"Minimum scale of this theme\") end\n  if (icol=20) then inf

ot.SetText(\"Maximum scale of this theme\") end\n  if (icol=21) then infot.SetText(\"Is threshold OFF for this theme\") end\n'end\n'theme name\nif ((irow>0) And (icol=0)) then infot.SetText(\"This parameter is read-only\"+nl+\"Use the project View to change active themes\") end\n'theme shape\nif ((irow>0) And (icol=1)) then infot.SetText(\"This parameter is read-only\") end\n'theme data, data on col3\nif ((irow>0) And ((icol=2) OR (icol=6)) ) then\n  sgl=self.GetList\n  tname=sgl.Get(irow).Get(0)\n  fnms = TheLay.Get(irow-1).Ge

tFTab.GetFields\n  theDataDia =av.FindDialog(\"toWKT.dataGUI\")\n  theICP=theDataDia.FindByName(\"intPanel\")\n  theIR=theDataDia.FindByName(\"intRadio\")\n  theER=theDataDia.FindByName(\"extRadio\")\n  theLB=theICP.FindByClass(ListBox).Get(0)\n  'theLB.Empty\n  'if (theLB.GetRowCount=0) then\n    theLB.DefineFromList(fnms)\n    theLB.SetSelectionStyle(#LISTBOX_SELECTION_MULTIRANGE)\n    arect=Rect.MakeXY(0,0,fnms.Count,fnms.Count)\n    theLB.SetSelection(arect,false)\n  'end\n  if(self.GetCurrentValue=true) then \n    theER.cli

ck\n  else\n    theIR.click\n  end\n  theDataDia.open\nend\n\n'theme link, link on col5\nif ((irow>0) And (icol=4)) then \n  sgl=self.GetList\n  tdata=sgl.Get(irow).Get(2)\n  theLinkDia =av.FindDialog(\"toWKT.linkGUI\")\n  theILR=theLinkDia.FindByName(\"intLinkRadio\")\n  theELR=theLinkDia.FindByName(\"extLinkRadio\")\n  if(tdata=true) then \n    theILR.SetEnabled(false) \n    theELR.click\n  else\n    theILR.SetEnabled(true)\n    theILR.click\n  end\n  theLinkDia.open\nend\n\n'namefield\nif ((irow>0) And (icol=7)) then \n  sgl=self.GetLi

st\n  if (sgl.Get(irow).Get(2)=false) then\n    fnl =sgl.Get(irow).Get(3)\n  else\n    fnl =sgl.Get(irow).Get(3).Get(7)\n  end\n  tNF = MsgBox.ListAsString (fnl, \"Select the Field with the name or title of the feature.\", \n        \"Select Name Field for \" + sgl.Get(irow).Get(0) + \" coverage\")\n  if (Not(tNF = nil)) then\n    self.SetCurrentValue(tNF)\n  end\nend\n\n'label it\nif ((irow>0) And (icol=8)) then \n  self.SetCurrentValue(Not(self.GetCurrentValue))\nend\n\n'miscellaneous\nif ((irow>0) And ((icol>8) And (icol<19))) t

hen \n  fnms = TheLay.Get(irow-1).EditLegend\n  if (Not(Script.The.GetName=\"toWKT.legChange\")) then\n    self.getDialog.setActivate(\"toWKT.legChange\")\n  end\nend\n\nif ((irow>0) And ((icol>18) And (icol<22)) ) then \n  fnms = TheLay.Get(irow-1).EditProps\n  if (Not(Script.The.GetName=\"toWKT.propChange\")) then\n    self.getDialog.setActivate(\"toWKT.propChange\")\n  end\nend\n\nif ((irow>0) And ((icol>22) And (icol<28)) ) then \n  fnms = theView.Edit\n  if (Not(Script.The.GetName=\"toWKT.propChange\")) then\n    self.getDialog.

setActivate(\"toWKT.propChange\")\n  end\nend\n"

)



(Script.177

	Name:	"toWKT.legChange"

	SourceCode:	"theView = av.GetActiveDoc\nif(Not(theView.GetClass.GetClassName=\"View\")) then\n  msgbox.info(\"No View activated.\"+nl+\"Please select a View first.\",\"Notice\")\n  exit\nend\ntheLay =theView.GetActiveThemes\ntheLB=SELF.FindByName(\"aListBox2\")\nirow = theLB.GetCurrentRow\nicol = theLB.GetCurrentColumn\nthm=theLay.get(irow-1)\n\nif (irow>0) then\n\n  theLB.GoRowColumn(irow,9)\n    if (thm.GetLegend.GetLegendType.AsString=\"LEGEND_TYPE_SIMPLE\") then\n      theLB.SetCurrentValue(\"single symbol\")\n    elseif (thm.GetLegend.GetLegend

Type.AsString=\"LEGEND_TYPE_UNIQUE\") then\n      theLB.SetCurrentValue(\"unique value\")\n    elseif (thm.GetLegend.GetLegendType.AsString=\"LEGEND_TYPE_COLOR\") then\n      theLB.SetCurrentValue(\"graduated color\")\n    elseif (thm.GetLegend.GetLegendType.AsString=\"LEGEND_TYPE_SYMBOL\") then\n      theLB.SetCurrentValue(\"graduated symbol\")\n    elseif (thm.GetLegend.GetLegendType.AsString=\"LEGEND_TYPE_DOT\") then\n      theLB.SetCurrentValue(\"dot symbol\")\n    elseif (thm.GetLegend.GetLegendType.AsString=\"LEGEND_TYPE_CHAR

T\") then\n      theLB.SetCurrentValue(\"chart symbol\")  \n    end\n\n  theLB.GoRowColumn(irow,10)\n    theLB.SetCurrentValue(thm.GetLegend.GetNumClasses)\n\n  theLB.GoRowColumn(irow,11)\n    lct=thm.GetLegend.GetClassType.asString\n    if (lct=\"LEGEND_CLASSTYPE_EQUALAREA\") then\n      lct=\"equal area\"\n    elseif (lct=\"LEGEND_CLASSTYPE_INTERVAL\") then\n      lct=\"equal interval\"\n    elseif (lct=\"LEGEND_CLASSTYPE_NATURAL\") then\n      lct=\"natural breaks\"\n    elseif (lct=\"LEGEND_CLASSTYPE_QUANTILE\") then\n      lct=\"quanti

le\"\n    elseif (lct=\"LEGEND_CLASSTYPE_STDDEV\") then\n      lct=\"stddev\"\n    end\n    theLB.SetCurrentValue(lct)\n   \n  theLB.GoRowColumn(irow,12)\n    str=\"\"\n    for each fnm in thm.GetLegend.GetFieldNames\n      str = str ++ fnm.AsString\n    end\n    theLB.SetCurrentValue(str)\n  \n  theLB.GoRowColumn(irow,13)\n    theLB.SetCurrentValue(thm.GetLegend.GetSymbols.Get(0).GetType)\n  \n  theLB.GoRowColumn(irow,14)\n    if (thm.GetLegend.GetSymbols.Get(0).CanSetSize=true) then\n      theLB.SetCurrentValue(thm.GetLegend.GetS

ymbols.Get(0).GetSize.setFormat(\"d.dd\")) \n    else\n      theLB.SetCurrentValue(\"NULL\")\n    end\n  \n  theLB.GoRowColumn(irow,15)\n    clrb =thm.GetLegend.GetSymbols.Get(0).GetBgColor\n    if(Not(clrb=nil)) then\n      clr=clrb.GetRGBList\n      str=clr.Get(0).AsHexString.Right(2)+clr.Get(1).AsHexString.Right(2)+clr.Get(2).AsHexString.Right(2)\n      theLB.SetCurrentValue(\"#\"+str.UCase)\n    else\n      theLB.SetCurrentValue(\"NULL\")\n    end\n  \n  theLB.GoRowColumn(irow,16)\n    clr =thm.GetLegend.GetSymbols.Get(0).GetC

olor.GetRGBList\n    str=clr.Get(0).AsHexString.Right(2)+clr.Get(1).AsHexString.Right(2)+clr.Get(2).AsHexString.Right(2)\n    theLB.SetCurrentValue(\"#\"+str.UCase)\n  \n  theLB.GoRowColumn(irow,17)\n    if ((thm.GetFTab.GetShapeClass.GetClassName=\"Polygon\")) then\n      clr =thm.GetLegend.GetSymbols.Get(0).GetOlColor.GetRGBList\n      str=clr.Get(0).AsHexString.Right(2)+clr.Get(1).AsHexString.Right(2)+clr.Get(2).AsHexString.Right(2)\n      theLB.SetCurrentValue(\"#\"+str.UCase)  \n    elseif ((thm.GetFTab.GetShapeClass

.GetClassName=\"PolyLine\")) then    \n      theLB.SetCurrentValue(\"#\"+str.UCase) 'same as FgColor : GetOlColor method for polyline is an abstract method\n    else\n      theLB.SetCurrentValue(\"NULL\") \n    end\n\n  theLB.GoRowColumn(irow,18)\n    if (thm.GetFTab.GetShapeClass.GetClassName=\"Polygon\") then\n      theLB.SetCurrentValue(thm.GetLegend.GetSymbols.Get(0).GetOlWidth.setFormat(\"d.dd\"))\n    else\n      theLB.SetCurrentValue(\"NULL\")\n    end\n    \n  theLB.GoRowColumn(irow,22)  \n    theCm =thm.GetLegend.getSymbols

\n    clist=List.Make\n    for each s in theCm\n      clr=s.GetColor.GetRGBList\n      str=\"rgb(\"+clr.Get(0).AsString+\",\"+ clr.Get(1).AsString+\",\"+clr.Get(2).AsString+\")\"\n      clist.Add(str)\n    end\n    theLB.SetCurrentValue(clist)\n\nend\n\ntheLB.getDialog.setActivate(\"toWKT.dummy\")\n\n\n"

)



(Script.178

	Name:	"toWKT.linkRadio"

	SourceCode:	"self.select\n"

)



(Script.179

	Name:	"toWKT.makeLayerString3"

	SourceCode:	"'LayerID INT NOT NULL auto_increment\n'TableName CHAR(50)\n'Shape CHAR(10)        : polygon,point,line\n'Name CHAR (50)        : of the theme\n'FillColor CHAR(17)    : from GetColor (foreground color)\n'StrokeColor CHAR(17)  : from GetOlColor\n'StrokeWidth REAL      : from GetOlWidth\n'MinScale INT          :\n'MaxScale INT          :\n'HasAttributes TINYINT : 1 if has (default);0 for none\n'NameField CHAR(50)    : for title\n'LabelColor CHAR(15)   : arbitrary Labelcolors(_themestep) \n'LabelSize INT         : default 

10\n'IDType Char(10)       : local, server\n'IDField Char(50)      : fieldname for id link\n'URL Char(70)          : \"\" for local\n'UseLabels TINYINT     : \n'IsExternal TINYINT    : 0 for local, 1 for server\n'LegendType Char(50)   : single symbol, unique value, graduated color, graduated symbol, dot symbol, chart symbol\n'ClassificationField   : single symbol=\"\",for multifields = space delimited fieldname \n' THESE PARAMETERS ADDED LATER\n'ClassificationType    : equal area,equal interval, natural breaks, quantile

, standard deviation\n'ClassesCount INT      : number of classes in a classification\n'SymbolType Char(50)   : pen,marker,\n'SymbolSize REAL       : size of the first symbol in a legend\n'Abstract Char(250)    : theme's comments\n\n\nlabelColors={\"#FF0000\",\"#0000FF\",\"#00FF00\",\"#FF00FF\",\"#FFA500\",\"#FFC0CB\",\"#A52A2A\"}\nlabelColors=labelColors.merge(labelColors).merge(labelColors)\n\ntheThemeName=SELF.Get(0).AsString\nthemePeriodIndex=theThemeName.Indexof(\".\")\nif (not(themePeriodIndex=-1)) then\n  theThemeName=theThemeNam

e.Left(themePeriodIndex)\nend\ntheThemeNameTable=theThemeName.Substitute(\" \", \"_\")\n\ntheShape=SELF.Get(1).AsString\nif ( (Not(theShape =\"Polygon\")) AND (Not(theShape = \"Point\")) ) then \n  theShape=\"Line\" \nend\n\nisExternal=SELF.Get(2) 'true or false\nif (isExternal=true) then\n  isExternal=\"1\"\nelse\n  isExternal=\"0\"\nend\n\nidType=SELF.Get(4) 'true or false\nif (idType=true) then\n  idType=\"'server'\"\nelse\n  idType=\"'local'\"\nend\n\ntheURL=\"'\"+SELF.Get(5)+\"'\"\n\ntheIDField=\"'\"+SELF.Get(6).GetName.AsString+\"'\"\n\ntheNameField=\"'\"

+SELF.Get(7).GetName.AsString+\"'\"\n\nlegendType=\"'\"+SELF.Get(9).AsString+\"'\"\n\nlabelIt=SELF.Get(8) 'true or false\nif (labelIt=true) then\n  labelIt=\"1\"\nelse\n  labelIt=\"0\"\nend\n\ntheClassificationField=SELF.Get(12).AsString.BasicTrim(\" \",\" \")\nif (theClassificationField=\"\") then\n  theClassificationField=\"NULL\"\nelse\n  theClassificationField=\"'\"+theClassificationField+\"'\"\nend \n\ntheRGBList=SELF.Get(16)\ntheOLRGBList=SELF.Get(17)\nif (Not(theOLRGBList=\"NULL\")) then\n  theOLRGBList=\"'\"+theOLRGBList+\"'\"\nend\n\ntheOLWidth=SELF

.Get(18)\nif (Not(theOLWidth.AsString=\"NULL\")) then\n  theOLWidth=theOLWidth.SetFormat(\"d.dd\")\nend\n\ntheMin=SELF.Get(19).AsString\n\ntheMax=SELF.Get(20).AsString\n\nhasAttributes=\"1\"\n\nlabelColor=\"'\"+labelColors.Get(_themeStep)+\"'\"\n\ntheClassificationType =\"'\"+SELF.Get(11).AsString+\"'\"\n\ntheClassesCount = SELF.Get(10).AsString\n\nst = SELF.Get(13).AsString\nif (st=\"SYMBOL_PEN\") then\n  st=\"pen\"\nelseif (st=\"SYMBOL_MARKER\") then\n  st=\"marker\"\nelseif (st=\"SYMBOL_FILL\") then\n  st=\"fill\"\nelseif (st=\"SYMBOL_TEXT\") then\n  st=\"t

ext\"\nelseif (st=\"SYMBOL_CHART\") then\n  st=\"chart\"\nend\ntheSymbolType =\"'\" + st + \"'\"\n\ntheSymbolSize=SELF.Get(14)\nif (Not(theSymbolSize.AsString=\"NULL\")) then\n  theSymbolSize=theSymbolSize.SetFormat(\"d.dd\")\nend\n\ncolstr=\"\"\nfor each coleur in SELF.Get(22)\n  colstr=colstr++coleur\nend\ntheColorList=colstr.trim\n\ntheThm =_theView.FindTheme(SELF.Get(0).AsString)\ntheComments = theThm.getComments\n\n        lyrStr = \"INSERT INTO Layers\" + nl \n            + \"VALUES (\" + nl \n            + \"     NULL,\" + nl \n            + \"

     '\" + theThemeNameTable +\"',\" + nl \n            + \"     '\" + theShape.LCase + \"',\" + nl \n            + \"     '\" + theThemeName + \"',\" + nl \n            + \"     '\" + theRGBList + \"',\" + nl \n            + \"     \" + theOLRGBList + \",\" + nl \n            + \"     \" + theOLWidth.AsString + \",\" + nl \n            + \"     \" + theMin.AsString + \",\" + nl \n            + \"     \" + theMax.AsString + \",\" + nl \n            + \"     \" + hasAttributes + \",\" + nl \n            + \"     \" + theNameField + \",\" + nl \n           

 + \"     \" + labelColor + \",\" + nl \n            + \"     10,\" + nl \n            + \"     \" + idType + \",\" + nl \n            + \"     \" + theIDField + \",\" + nl \n            + \"     \" + theURL + \",\" + nl \n            + \"     \" + labelIt + \",\" + nl \n            + \"     \" + isExternal + \",\" + nl \n            + \"     \" + legendType + \",\" + nl \n            + \"     \" + theClassificationField + \",\" + nl \n            + \"     \" + theClassificationType + \",\" + nl \n            + \"     \" + theClassesCount + \",\" + nl \n     

       + \"     \" + theSymbolType + \",\" + nl \n            + \"     \" + theSymbolSize.AsString +\",\" +nl \n            + \"     '\" + theColorList +\"',\" + nl\n            + \"     '\" + theComments +\"'\" + nl\n\n            + \"     )\\g\" + nl\n            \n        return lyrStr\n"

)



(Script.180

	Name:	"toWKT.makeTags"

	SourceCode:	"'list= {tag0,tag1,tag2,tag3,valueOfTheLastTag}\nnls = SELF.Count-1\nstr=\"\"\nfor each i in 0..nls\n  tabstr=\"\"\n  if (i>0) then\n    tabstr = string.MakeBuffer(i*4)\n  end\n  if (Not(SELF.Get(i).AsString.Trim=\"\")) then\n    if (i<(nls-1)) then\n      str=str + tabstr +\"<\"+ SELF.Get(i).AsString + \">\" + nl\n    end\n    if (i=(nls-1)) then\n      if (SELF.Get(nls).AsString.Trim=\"\") then\n        str=str + tabstr +\"<\"+ SELF.Get(i).AsString + \"/>\"      \n      else\n        str=str + tabstr +\"<\"+ SELF.Get(i).AsString + \">\"\n    

  end\n    end\n    if (i=nls) then\n      str=str + SELF.Get(i).AsString + \"</\"+SELF.Get(i-1).AsString+\">\"\n    end\n  end\nend\n\nif ((SELF.Count=3) AND (Not(SELF.Get(0).AsString.Trim=\"\"))) then\n  str=str + nl+\"</\"+ SELF.Get(0).AsString + \">\"\nend\nif (SELF.Count>3) then\n'  str=str + nl\n  ntg = SELF.Count-3\n  for each i in ntg..0 by -1\n    tabstr=\"\"\n    if (i>0) then\n      tabstr = string.MakeBuffer(i*4)\n    end\n    if ( Not(SELF.Get(i).AsString.Trim=\"\") ) then\n      if (i=0) then\n        str=str +nl+ tabstr + \"</\"

+ SELF.Get(i).AsString + \">\"\n      else\n        str=str +nl+ tabstr + \"</\"+ SELF.Get(i).AsString + \">\"\n      end\n    end\n  end\nend\nstr.basictrim(nl,nl)\nreturn str"

)



(Script.181

	Name:	"toWKT.openDataDialog"

	SourceCode:	"'msgbox.info(SELF.GetName,\"opendatadialog\")\ntheIP=SELF.FindByName(\"intRadio\")\ntheIP.click"

)



(Script.182

	Name:	"toWKT.openMainDialog"

	SourceCode:	"SELF.FindByName(\"refreshButton\").click\n"

)



(Script.183

	Name:	"toWKT.propChange"

	SourceCode:	"theView = av.GetActiveDoc\nif(Not(theView.GetClass.GetClassName=\"View\")) then\n  msgbox.info(\"No View activated.\"+nl+\"Please select a View first.\",\"Notice\")\n  exit\nend\ntheLay =theView.GetActiveThemes\ntheLB=SELF.FindByName(\"aListBox2\")\nirow = theLB.GetCurrentRow\nicol = theLB.GetCurrentColumn\nthm=theLay.get(irow-1)\n\nif ((icol>18) AND (icol<22)) then\n    theLB.GoRowColumn(irow,19)\n    theLB.SetCurrentValue(thm.GetThreshold.GetMinimum)\n  \n    theLB.GoRowColumn(irow,20)\n    theLB.SetCurrentValue(thm.GetThreshold.G

etMaximum)\n  \n    theLB.GoRowColumn(irow,21)\n    theLB.SetCurrentValue(thm.GetThreshold.IsOff)\nend\nif ((icol>22) AND (icol<28)) then  \n  theLB.GoRowColumn(irow,23)\n  theVPrj = theView.getProjection.AsString\n  theLB.SetCurrentValue(theVPrj) \n\n  if (theView.getProjection.IsNull.Not)  then \n    theThmRect = thm.ReturnExtent.ReturnProjected(theView.getProjection)\n  else\n    theThmRect = thm.ReturnExtent\n  end\n\n  theLB.GoRowColumn(irow,24)  \n  theLB.SetCurrentValue(theThmRect.GetLeft.setFormat(\"d.dddddd\"))  \n\n  

theLB.GoRowColumn(irow,25)\n  theLB.SetCurrentValue(theThmRect.GetRight.setFormat(\"d.dddddd\"))\n\n  theLB.GoRowColumn(irow,26)\n  theLB.SetCurrentValue(theThmRect.GetTop.setFormat(\"d.dddddd\"))\n\n  theLB.GoRowColumn(irow,27)   \n  theLB.SetCurrentValue(theThmRect.GetBottom.setFormat(\"d.dddddd\")) \nend\n\ntheLB.getDialog.setActivate(\"toWKT.dummy\")\n"

)



(Script.184

	Name:	"toWKT.Script1"

	SourceCode:	"md=av.FindDialog(\"toWKT.mainGUI\")\n'msgbox.info(md.GetClass.GetClassName,\"\")\nmd.open"

)



(Script.185

	Name:	"toWKT.setListbox"

	SourceCode:	"theView = av.GetActiveDoc\n_theView=theView\nmyList = List.make\nif(Not(theView.GetClass.GetClassName=\"View\")) then\n  msgbox.info(\"No View activated.\"+nl+\"Please select a View first, and click the Refresh button.\"+nl+\"If toWKT dialog is open you don't need to close it.\",\"Notice\")\n  exit\nend\ntheLay =theView.GetActiveThemes\nif(theLay.Count=0) then\n  msgbox.info(\"You have activated a View without selecting any theme.\"+nl+\"Please select theme(s) from the View, and click the Refresh button.\"+nl+\"If toWKT dialog is 

open, you don't have to close it.\",\"Notice\")\n  exit\nend\n\ntmp = {\"Name\",\"Shape\",\"ExternalData\",\"Data\",\"ExternalLink\",\"Link\",\"IDField\",\"NameField\",\"LabelDefault\",\n       \"LegendType\",\"Classes\",\"ClassType\",\"ClassFields\",\"SymbolType\",\"SymbolSize\",\n       \"BgColor\",\"FgColor\",\"OlColor\",\"OlWidth\",\"ThresholdMin\",\"ThresholdMax\",\"ThresholdIsOff\",\"ColorList\",\n       \"Projection\",\"LonMin\",\"LonMax\",\"LatMin\",\"LatMax\"}\nmyList.add(tmp)\n\nfor each thm in theLay\n  tmp = List.make\n\n'column0 : Theme name\n  tmp.add(thm.GetName) 

\n  \n'column1 : Theme Shape  \n  tmp.add(thm.GetFTab.GetShapeClass.GetClassName)\n  \n'column2 : use External Database ? default is Internal\n  tmp.add(false)\n  \n'Column3 : data Fields, column width set to zero; to edit click on column2\n  tmp.add(thm.GetFTab.GetFields) 'because internal database is the default for column3, use all of the fields in this theme for default data fields.\n\n'column4 : use External Link ? default is Internal Link\n  tmp.add(false)\n\n'column5 : external Link parameter; default is \"\" for in

ternal Link;column width set to zero; to edit click on column4\n  tmp.add(\"\")\n\n'column6 : IDField for external Link; default is \"\" for internal Link  \n  tmp.add(\"\")\n\n'column7 : NameField used for labeling\n  if(thm.CanLabel=true) then\n    tmp.add(thm.GetLabelField) '7:label from namefield\n  else\n    tmp.add(\"\")\n  end\n\n'column8 : Label the feature?\n  tmp.add(thm.CanLabel) \n\n'column9 : Legend Type  \n  if (thm.GetLegend.GetLegendType.AsString=\"LEGEND_TYPE_SIMPLE\") then\n    tmp.add(\"single symbol\")\n  elseif (thm.

GetLegend.GetLegendType.AsString=\"LEGEND_TYPE_UNIQUE\") then\n    tmp.add(\"unique value\")\n  elseif (thm.GetLegend.GetLegendType.AsString=\"LEGEND_TYPE_COLOR\") then\n    tmp.add(\"graduated color\")\n  elseif (thm.GetLegend.GetLegendType.AsString=\"LEGEND_TYPE_SYMBOL\") then\n    tmp.add(\"graduated symbol\")\n  elseif (thm.GetLegend.GetLegendType.AsString=\"LEGEND_TYPE_DOT\") then\n    tmp.add(\"dot symbol\")\n  elseif (thm.GetLegend.GetLegendType.AsString=\"LEGEND_TYPE_CHART\") then\n    tmp.add(\"chart symbol\")  \n  end \n  \n'col

umn10 : Number of class in classification\n  tmp.add(thm.GetLegend.GetNumClasses)\n  \n'column11 : Classification type\n  lct=thm.GetLegend.GetClassType.asString\n  if (lct=\"LEGEND_CLASSTYPE_EQUALAREA\") then\n    lct=\"equal area\"\n  elseif (lct=\"LEGEND_CLASSTYPE_INTERVAL\") then\n    lct=\"equal interval\"\n  elseif (lct=\"LEGEND_CLASSTYPE_NATURAL\") then\n    lct=\"natural breaks\"\n  elseif (lct=\"LEGEND_CLASSTYPE_QUANTILE\") then\n    lct=\"quantile\"\n  elseif (lct=\"LEGEND_CLASSTYPE_STDDEV\") then\n    lct=\"stddev\"\n  end\n  tmp.a

dd(lct)\n  \n'column12 : Classification field(s); space delimited string for multi fields\n  str=\"\"\n  for each fnm in thm.GetLegend.GetFieldNames\n    str = str ++ fnm.AsString\n  end\n  tmp.add(str)\n  \n'column13 : Symbol type of the first symbol\n  tmp.add(thm.GetLegend.GetSymbols.Get(0).GetType) \n  \n'column14 : Symbol size of the first symbol\n  if (thm.GetLegend.GetSymbols.Get(0).CanSetSize=true) then\n    tmp.add(thm.GetLegend.GetSymbols.Get(0).GetSize.setFormat(\"d.dd\")) \n  else\n    tmp.add(\"NULL\")\n  end\n  \n'col

umn15 : Background color\n  clrb =thm.GetLegend.GetSymbols.Get(0).GetBgColor\n  if(Not(clrb=nil)) then\n    clr=clrb.GetRGBList\n    str=clr.Get(0).AsHexString.Right(2)+clr.Get(1).AsHexString.Right(2)+clr.Get(2).AsHexString.Right(2)\n    tmp.add(\"#\"+str.UCase)\n  else\n    tmp.add(\"NULL\")\n  end\n  \n'column16 : Foreground Color\n  clr =thm.GetLegend.GetSymbols.Get(0).GetColor.GetRGBList\n  str=clr.Get(0).AsHexString.Right(2)+clr.Get(1).AsHexString.Right(2)+clr.Get(2).AsHexString.Right(2)\n  tmp.add(\"#\"+str.UCase) \n  \n'

column17 : Outline Color\n  if ((thm.GetFTab.GetShapeClass.GetClassName=\"Polygon\")) then\n    clr =thm.GetLegend.GetSymbols.Get(0).GetOlColor.GetRGBList\n    str=clr.Get(0).AsHexString.Right(2)+clr.Get(1).AsHexString.Right(2)+clr.Get(2).AsHexString.Right(2)\n    tmp.add(\"#\"+str.UCase)  \n  elseif ((thm.GetFTab.GetShapeClass.GetClassName=\"PolyLine\")) then    \n    tmp.add(\"#\"+str.UCase) 'same as FgColor : GetOlColor method for polyline is an abstract method\n  else\n    tmp.add(\"NULL\") \n  end\n  \n'column18 : Outline 

Width  (in points)\n  if (thm.GetFTab.GetShapeClass.GetClassName=\"Polygon\") then\n    tmp.add(thm.GetLegend.GetSymbols.Get(0).GetOlWidth.setFormat(\"d.dd\"))\n  else\n    tmp.add(\"NULL\")\n  end    \n  \n'column19-21 : Threshold attributes\n  tmp.add(thm.GetThreshold.GetMinimum)\n  tmp.add(thm.GetThreshold.GetMaximum)\n  tmp.add(thm.GetThreshold.IsOff)\n\n'column22 : Colormap\n  theCm =thm.GetLegend.getSymbols\n  clist=List.Make\n  for each s in theCm\n    clr=s.GetColor.GetRGBList\n    str=\"rgb(\"+clr.Get(0).AsString+\",\"+ clr.

Get(1).AsString+\",\"+clr.Get(2).AsString+\")\"    \n    'str=clr.Get(0).AsHexString.Right(2)+clr.Get(1).AsHexString.Right(2)+clr.Get(2).AsHexString.Right(2)\n    'str=\"#\"+str.UCase   \n    clist.Add(str)\n  end\n  tmp.add(clist)\n\n'column23 : Projection\n  theVPrj = theView.getProjection.AsString\n  tmp.add(theVPrj)\n  \n'column24-27 : Lon min max , Lat min max\n  if (theView.getProjection.IsNull.Not)  then \n    theThmRect = thm.ReturnExtent.ReturnProjected(theView.getProjection)\n  else\n    theThmRect = thm.ReturnExtent\n

  end\n  tmp.add(theThmRect.GetLeft.setFormat(\"d.dddddd\"))\n  tmp.add(theThmRect.GetRight.setFormat(\"d.dddddd\"))\n  tmp.add(theThmRect.GetTop.setFormat(\"d.dddddd\"))\n  tmp.add(theThmRect.GetBottom.setFormat(\"d.dddddd\"))\n      \n  myList.add(tmp)\nend \n\n\n'for each i in 0..(theNumRecs -1)\ntheDia = av.FindDialog(\"toWKT.mainGUI\")\ntheCtl = theDia.FindByName(\"aListBox2\")\ntheCtl.DefineFromList(myList)\ntheCtl.GoColumn(3)\ntheCtl.SetColumnWidth(0)\ntheCtl.GoColumn(5)\ntheCtl.SetColumnWidth(0)\ntheCtl.GoColumn(22)\ntheCtl.SetCo

lumnWidth(0)"

)



(Script.186

	Name:	"toWKT.tomysql3"

	SourceCode:	"'row0: label field\n'row 1-n : theme index\n\n'col0: string : theme name\n'col1: string : theme shape\n'col2: boolean: use external data? \n'col3: list   : internal:{ fields1,fields2,..,fieldsN } \n'               external:{ server,user,pass,db,table,lon,lat,{fields1,fields2,..,fieldsN} }\n'               (this column width set to zero)\n'col4: boolean: use external link? \n'col5: string : internal: \"\"\n'               external: alinkparameter\n'               (this column width set to zero)\n'col6: string : ID field\n'c

ol7: string : a field with title or name of the feature\n'col8: boolean: label the feature using nameField?\n'col9: string : legend type\n'col10: number: number of classes in a legend\n'col11: string: classification type\n'col12: string: fields for classifications; space delimited for multifields;\n'col13: string: symbol(0) type\n'col14: number: symbol(0) size\n'col15: string: symbol(0) background color\n'col16: string: symbol(0) foreground color\n'col17: string: symbol(0) OutLine Color\n'col18: number: symbol(0) OutL

ine Width\n'col19: number: Threshold min\n'col20: number: Threshold max\n'col21: boolean:Threshold is off?\n'col22: string: comma separated list of each symbol color \n'              (this column width set to zero)\n'col23: string: Projection Name\n'col24-27     : Lon min max, Lat min max\n\n\ntime1=Date.now\nfileList=List.Make\ntheLay =_theView.GetActiveThemes\nmyDia = SELF.getDialog\ntheLB = SELF.getDialog.FindByName(\"aListBox2\")\nLBList=theLB.GetList\nirow=theLB.GetCurrentRow\nicol=theLB.GetCurrentColumn\nnrow=theLB.GetRo

wCount\nncol=theLB.GetColumnCount\n\nif (nrow=1) then\n  msgbox.info(\"No active themes selected.\"+\"Please select themes from view first.\",\"STOP\")\n  exit\nelse\n  if(irow=0) then\n    irow=1\n  end\nend\n\ntheView=_theView\n\ntheViewName=theView.GetName\ntheViewNameFile=theViewName.Substitute(\" \", \"_\")\ntheViewNameFileBMP=theViewNameFile + \".bmp\"\ntheViewNameFileBMP=theViewNameFileBMP.asFileName\ntheViewNameFilePHP=theViewNameFile+\".php\"\ntheViewNameFilePHP=theViewNameFilePHP.AsFileName\n\n'convert to BMP\nbmpchk=SELF.getDialog.

FindByName(\"aCheckBox15\")\nif (bmpchk.IsSelected=true) then\n  clt=SELF.GetDialog.FindByName(\"aTextLine13\")\n  bmp2pngFN=clt.GetText\n  system.execute(bmp2pngFN.AsString ++ theViewNameFileBMP.AsString)\n  fileList.add(theViewNameFileBMP)\nend\n\ntheScale=theView.ReturnScale\nif (theScale=0) then\n    MsgBox.Info (\"Please set view map units before exporting.  Exiting.\", \"Units not set!\")\n    exit\nend\n\ntheDir=MsgBox.Input (\"Enter the path to an existing directory where you want to put the files.\", \"Specifiy file locati

on\", \"c:\\temp\")\nif (theDir=nil) then\n  exit\nend\ntheDir=theDir.AsFileName\ntheDir.SetCWD\n\nthePrj = theView.GetProjection\nproject_flag = thePrj.IsNull.Not  'true if projected\ntheVisExtent = theView.GetDisplay.ReturnVisExtent\nadminPassword=MsgBox.Input (\"Enter a password for use in administering of the map.\", \"Enter an Admin Password\", \"\")\nif (adminPassword=nil) then\n  exit\nend\n'=========================\ntheWin = theView.GetWin\ntheExtent = theWin.ReturnExtent\n\ntheX = theExtent.GetX - (_theView.GetTOCWidth + 15)

\ntheY = theExtent.GetY - 31\n\nNumber.SetDefFormat( \"d.dddddddd\" )\n\ntheMaxXImage = theX\ntheMaxYImage = theY\ntheVisRect = theView.GetDisplay.ReturnVisExtent\ntheMinxView = theVisRect.GetLeft\ntheMinyView = theVisRect.GetTop\ntheMaxxView = theVisRect.GetRight\ntheMaxyView = theVisRect.GetBottom\n\ntheImageXunit = (theMaxxView - theMinxView)/theMaxXImage\ntheImageYunit = (theMaxyView - theMinyView)/theMaxYImage\n\ntheDisplay=theView.getDisplay\ntheUnits=theDisplay.getUnits\n\nNumber.SetDefFormat( \"\" )\ntheWidth=theX\ntheWidth

.SetFormat(\"d\")\ntheHeight=theY\ntheHeight.SetFormat(\"d\")\ntheScale=theView.ReturnScale\ntheScale.SetFormat(\"d\")\ntheViewNameFileMySQL=theViewNameFile+\".sql\"\n\nmySQLDumpFN=theViewNameFileMySQL.AsFileName\nmySQLDumpFile = LineFile.Make(mySQLDumpFN, #FILE_PERM_WRITE)\nfileList.add(mySQLDumpFN)\ntheProjection=thePrj.AsString\nmySQLDumpFile.WriteElt(\"# Exported from ArcView to mySQL\" + nl + \"# using open source script shp2svg&mysql, see http://www.carto.net\" + nl + nl + \"CREATE TABLE Project\" + nl + \"     (\" + nl \n  + \" 

    ProjectID INT NOT NULL auto_increment,\" + nl \n  + \"     Title CHAR(250),\" + nl \n  + \"     IsProjected TINYINT,\" + nl \n  + \"     XMin REAL,\" + nl \n  + \"     XMax REAL,\" + nl \n  + \"     YMin REAL,\" + nl \n  + \"     YMax REAL,\" + nl \n  + \"     Width INT,\" + nl \n  + \"     Height INT,\" + nl \n  + \"     Scale INT,\" +  nl \n  + \"     Abstract CHAR(250),\" + nl \n  + \"     AdminPassword Char(50),\" + nl + \"     PRIMARY KEY (ProjectID)\" + nl + \"     )\\g\" + nl)\nmySQLDumpFile.WriteElt(\"INSERT INTO Project\" + nl + \"VALUE

S (\" + nl \n  + \"     NULL,\" + nl \n  + \"     '\"+ theViewName.AsString + \"',\" + nl \n  + \"     0,\" + nl \n  + \"     \" + theMinxView.AsString + \",\" + nl \n  + \"     \" + theMaxxView.AsString + \",\" + nl \n  + \"     \" + theMinyView.AsString + \",\" + nl\n  + \"     \" + theMaxyView.AsString + \",\" + nl\n  + \"     \" + theWidth.AsString + \",\" + nl \n  + \"     \" + theHeight.AsString + \",\" + nl \n  + \"     \" + theScale.AsString + \",\" + nl \n  + \"     '\" + theView.getComments + \"',\" + nl\n  + \"     '\" + adminPassword + \"'\" + nl + \" 

    ) \\g\" + nl)\n\nif (not(project_flag)) then\n    mySQLDumpFile.WriteElt(\"CREATE TABLE ExternalLayers\" + nl + \"     (\" + nl + \"     LayerID INT NOT NULL auto_increment,\" + nl + \"     MySQLServer CHAR(250),\" + nl + \"     UserName CHAR(250),\" + nl + \"     Password CHAR(250),\" + nl + \"     DatabaseName Char(250),\" + nl + \"     TableName CHAR(250),\" + nl + \"     LongitudeField CHAR(250),\" + nl + \"     LatitudeField CHAR(250),\" + nl + \"     PRIMARY KEY (LayerID)\" + nl + \"     )\\g\" + nl)\nend\n\n'creating table *Laye

r* : no input required, the table structure already in toWKT.createTableLayer script\nmySQLDumpFile.WriteElt(av.Run(\"toWKT.createTableLayer3\",\"\") )\n\n\n_themeStep=0\n_themeStep.setFormat(\"d\")\nfor each theTheme in theView.GetActiveThemes\n  TL=LBList.Get(_themeStep+1)\n  \n  if (TL.Get(2)=true) then\n    if ((TL.Get(1)=\"Point\") and (not(project_flag))) then\n      mySQLDumpFile.WriteElt(\"INSERT INTO ExternalLayers\" + nl + \"VALUES (\" + nl + \"     \" + _themeStep.AsString + \",\" + nl + \"     '\" +  TL.Get(3).Get(0) + \"',\"

 + nl + \"     '\" + TL.Get(3).Get(1) + \"',\" + nl +\"     '\" + TL.Get(3).Get(2) + \"',\" + nl + \"     '\" + TL.Get(3).Get(3) + \"',\" + nl +\"     '\" + TL.Get(3).Get(4) + \"',\" + nl +\"     '\" + TL.Get(3).Get(5) + \"',\" + nl +\"     '\" + TL.Get(3).Get(6) + \"'\" + nl +\"     )\\g\" + nl)\n    end\n  end\n  if (TL.Get(2)=false) then\n  end\n  \n'inserting values to table *Layer* : input parameters from a list (list from the listbox for current row or current theme) \n'see comments (from col0 to col22) on the beginning of this script

 \n  mySQLDumpFile.WriteElt( av.Run(\"toWKT.makeLayerString3\",TL) )\n\n'creating table for each theme : input parameters same as the line above\n  mySQLDumpFile.WriteElt( av.Run(\"toWKT.createThemesTable\",TL) )    \n  \n  theThemeName=TL.Get(0).AsString\n    themePeriodIndex=theThemeName.Indexof(\".\")\n  if (not(themePeriodIndex=-1)) then\n    theThemeName=theThemeName.Left(themePeriodIndex)\n  end\n  theThemeNameTable=theThemeName.Substitute(\" \", \"_\")\n  theLay =_theView.GetActiveThemes\n  theThm = theLay.Get(_themeStep)\n

  \n  recordStep=0\n  recordStep.setFormat(\"d\")\n\n  theFTab = theThm.GetFTab\n  shapeField = theFTab.FindField(\"Shape\")\n  thePlist = theFtab.returnvalue(shapeField,0).AsPolyLine.AsList\n\n  theNumRecs = theFtab.GetNumRecords\n  sbUnit = 100/theNumRecs\n  sb = sbUnit\n  \n    for each i in 0..(theNumRecs -1)\n        if ((theFtab.returnvalue(shapeField,i).Intersects(theVisExtent)) or (theFtab.returnvalue(shapeField,i).IsContainedIn(theVisExtent)))  then\n            txtOut = \"\"\n            thePrjShape = theFtab.returnva

lue(shapeField,i).ReturnProjected(thePrj)\n            theShapeExtent=thePrjShape.ReturnExtent\n            Number.SetDefFormat( \"d.dddddddd\" )\n            i.setFormat(\"d\")\n            theShapeType=theTheme.GetSrcName.GetSubName\n            if (theShapeType.contains(\"polygon\")) then              \n                thePrjShape = thePrjShape.ReturnClipped(theVisExtent)\n                theShapeExtent=thePrjShape.ReturnExtent\n                XMin = theShapeExtent.GetLeft\n                XMax = theShapeExtent.GetRig

ht\n                YMin = theShapeExtent.GetTop              \n                YMax = theShapeExtent.GetBottom\n                \n                thePolygonlist = thePrjShape.AsPolyline.Explode\n                thePolygonlistCount=thePolygonlist.count\n                if (thePolygonlistCount>1) then\n                  txtOut=\"MULTIPOLYGON(\"\n                else\n                  txtOut=\"POLYGON\"\n                end\n                for each poly in thePolygonList 'added\n                  'substitue commas with spa

ces, newlines with commas\n                  tsr =poly.AsString.Substitute(\",\",\" \").Substitute(nl,\",\")\n                  tsr =tsr.right(tsr.count-tsr.indexOf(\",\")-1) 'removing the *Polyline* word\n                  tsr =tsr.right(tsr.count-tsr.indexOf(\",\")-1) 'removing parts count; since it was exploded parts count always one\n                  tsr =tsr.right(tsr.count-tsr.indexOf(\",\")-1) 'removing number for each part\n                  tsr =tsr.basictrim(\",\",\",\") 'removing excessive commas from Substitute(nl,

\",\")                 \n                  txtOut=txtOut+\"((\" + tsr +\")),\"\n                end 'added\n                  \n                txtOut=txtOut.left(txtOut.Count -1)\n                if (thePolygonlistCount>1) then\n                  txtOut=txtOut+\")\"\n                end\n                _themeStep.SetFormat(\"d\")\n\n                mySQLDumpFile.WriteElt(\"INSERT INTO \" + theThemeNameTable + nl + \"VALUES (\" + nl + \"     NULL,\" + nl + \"     '\" + txtOut + \"',\" + nl + \"     \" + XMin.AsString + \",\" + nl + \"     \"

 + XMax.AsString + \",\" + nl + \"     \" + YMin.AsString + \",\" +  nl + \"     \" + YMax.AsString)\n            elseif (theShapeType.contains(\"arc\")) then\n                thePrjShape = thePrjShape.ReturnClipped(theVisExtent)\n                theShapeExtent=thePrjShape.ReturnExtent\n                XMin = theShapeExtent.GetLeft\n                XMax = theShapeExtent.GetRight\n                YMin = theShapeExtent.GetTop\n                YMax = theShapeExtent.GetBottom\n                thePList = thePrjShape.Explode\n     

           thePListCount=thePList.count\n                if (thePListCount>1) then\n                  txtOut=\"MULTILINESTRING(\"\n                else\n                  txtOut=\"LINESTRING\"\n                end\n                for each p in thePList 'added\n                  tsr =p.AsString.Substitute(\",\",\" \").Substitute(nl,\",\")\n                  tsr =tsr.right(tsr.count-tsr.indexOf(\",\")-1) 'removing the *PolyLine* word\n                  tsr =tsr.right(tsr.count-tsr.indexOf(\",\")-1) 'removing parts count, which is 

always one\n                  tsr =tsr.right(tsr.count-tsr.indexOf(\",\")-1) 'removing number of points for each part\n                  tsr =tsr.basictrim(\",\",\",\") 'removing excessive commas from Substitute(nl,\",\")\n                  txtOut=txtOut+\"(\" + tsr +\"),\"\n                end 'added                                                                   \n                txtOut=txtOut.left(txtOut.Count -1)\n                if (thePlistCount>1) then\n                  txtOut=txtOut+\")\"\n                end\n        

        _themeStep.SetFormat(\"d\")\n\n                mySQLDumpFile.WriteElt(\"INSERT INTO \" + theThemeNameTable + nl + \" VALUES (\" + nl + \"     NULL,\" + nl + \"     '\" + txtOut + \"',\" + nl + \"     \" + XMin.AsString + \",\" + nl + \"     \" + XMax.AsString + \",\" + nl + \"     \" + YMin.AsString + \",\" +  nl + \"     \" + YMax.AsString)\n            elseif (theShapeType.contains(\"point\")) then\n                theXPos = thePrjShape.GetX\n                theYPos = thePrjShape.GetY\n                XMin = theXPos\n              

  XMax = theXPos\n                YMin = theYPos\n                YMax = theYPos\n                mySQLDumpFile.WriteElt(\"INSERT INTO \" + theThemeNameTable + nl + \" VALUES (\" + nl + \"     NULL,\" + nl + \"     'POINT(\" + theXPos.AsString + \" \" + theYPos.AsString + \")',\"+nl +\"     \" + XMin.AsString + \",\" + nl + \"     \" + XMax.AsString + \",\" + nl + \"     \" + YMin.AsString + \",\" +  nl + \"     \" + YMax.AsString)\n            end\n            \n            if (TL.Get(2)=false) then\n                mySQLDumpFile.WriteElt

(\",\")\n                fieldStep=0\n                theFields=TL.Get(3)\n                for each theFN in theFields\n\n                if (theFN.Is(String)=true) then \n                  theFieldName=theFN\n                  theField=theThm.GetFTab.FindField(theFN)  \n                elseif (theFN.Is(Field)=true) then\n                  theField=theFN\n                  theFieldName=theFN.GetName.AsString\n                end               \n                    fieldType=theField.getType.AsString\n                    i

f (not(theFieldName=\"shape\")) then\n                        theValue = theFtab.ReturnValueString(theField,i)\n                        if (not (fieldStep=(theFields.count-1))) then\n                            if ((fieldType=\"FIELD_BYTE\") or (fieldType=\"FIELD_DECIMAL\") or (fieldType=\"FIELD_DOUBLE\") or (fieldType=\"FIELD_FLOAT\") or (fieldType=\"FIELD_LOGICAL\") or (fieldType=\"FIELD_LONG\") or (fieldType=\"FIELD_SHORT\")) then\n                                if (theValue.AsString=\"\") then\n                              

    theValue = \"NULL\"\n                                end\n                                mySQLDumpFile.WriteElt(\"     \" + theValue.AsString + \",\")\n                            elseif ((fieldType=\"FIELD_CHAR\") or (fieldType=\"FIELD_MONEY\") or (fieldType=\"FIELD_BLOB\") or (fieldType=\"FIELD_VCHAR\")) then\n                                theValue=theValue.Substitute(\"\\\", \"\\\\\")\n                                theValue=theValue.Substitute(\"$\", \"\\$\")\n                                theValue=theValue.Substitute(\"'\", \"

\\'\")\n                                mySQLDumpFile.WriteElt(\"     \" + \"'\" + theValue.AsString + \"',\")\n                            elseif ((fieldType=\"FIELD_DATE\") or (fieldType=\"DATE\") or (fieldType=\"FIELD_ISODATE\") or (fieldType=\"FIELD_ISODATETIME\") or (fieldType=\"FIELD_ISOTIME\")) then\n                                mySQLDumpFile.WriteElt(\"     \" + \"'\" + theValue.AsString + \"',\")\n                            end\n                        else\n                            if ((fieldType=\"FIELD_BYTE\") or (field

Type=\"FIELD_DECIMAL\") or (fieldType=\"FIELD_DOUBLE\") or (fieldType=\"FIELD_FLOAT\") or (fieldType=\"FIELD_LOGICAL\") or (fieldType=\"FIELD_LONG\") or (fieldType=\"FIELD_SHORT\")) then\n                                if (theValue.AsString=\"\") then\n                                  theValue = \"NULL\"\n                                end                            \n                                mySQLDumpFile.WriteElt(\"     \" + theValue.AsString)\n                            elseif ((fieldType=\"FIELD_CHAR\") or (fieldType

=\"FIELD_MONEY\") or (fieldType=\"FIELD_BLOB\") or (fieldType=\"FIELD_VCHAR\")) then\n                                theValue=theValue.Substitute(\"\\\", \"\\\\\")\n                                theValue=theValue.Substitute(\"$\", \"\\$\")\n                                theValue=theValue.Substitute(\"'\", \"\\'\")\n                                mySQLDumpFile.WriteElt(\"     \" + \"'\" + theValue.AsString + \"'\")\n                            elseif ((fieldType=\"FIELD_DATE\") or (fieldType=\"DATE\") or (fieldType=\"FIELD_ISODATE\") or (fie

ldType=\"FIELD_ISODATETIME\") or (fieldType=\"FIELD_ISOTIME\")) then\n                                mySQLDumpFile.WriteElt(\"     \" + \"'\" + theValue.AsString + \"'\")\n                            end\n                        end\n                    end\n                    fieldStep=fieldStep+1\n                end\n            end\n            mySQLDumpFile.WriteElt(\"     )\\g\" + nl)\n            recordStep=recordStep+1\n        end\n        av.SetStatus(sb)\n        sb = sb + sbUnit\n    end\n\n    Number.SetDefFormat( \"d\" )

\n  \n  \n  _themeStep=_themeStep+1\nend\n\nav.ClearStatus\nconnectFN=\"connect.php\".AsFileName\nconnectFile = LineFile.Make(connectFN, #FILE_PERM_WRITE)\nfileList.add(connectFN)\nmysqlServer=SELF.GetDialog.FindByName(\"textServer\").GetText\nmysqlUser=SELF.GetDialog.FindByName(\"textUser\").GetText\nmysqlPassword=SELF.GetDialog.FindByName(\"textPassword\").GetText\nconnectFile.WriteElt(\"<?\" + nl + \"$db = mysql_connect(\"\"\" + mysqlServer +\"\"\", \"\"\"+ mysqlUser + \"\"\",\"\"\"+mysqlPassword+\"\"\");\" + nl + \"mysql_select_db(\"\"\" + theViewNa

meFile+\"\"\",$db);\" + nl + \"?>\")\n\ndur=Date.now-time1\nmsgbox.info(\"Completed in \"+dur.asSeconds.asString+\" seconds\",\"Duration\")\nav.Run(\"toWKT.filesCreated\",fileList) \n\n\n"

)



(Script.187

	Name:	"toWKT.toSVG"

	SourceCode:	"'row0: label field\n'row 1-n : theme index\n\n'col0: string : theme name\n'col1: string : theme shape\n'col2: boolean: use external data? \n'col3: list   : internal:{ fields1,fields2,..,fieldsN } \n'               external:{ server,user,pass,db,table,lon,lat,{fields1,fields2,..,fieldsN} }\n'               (this column width set to zero)\n'col4: boolean: use external link? \n'col5: string : internal: \"\"\n'               external: alinkparameter\n'               (this column width set to zero)\n'col6: string : ID field\n'c

ol7: string : a field with title or name of the feature\n'col8: boolean: label the feature using nameField?\n'col9: string : legend type\n'col10: number: number of classes in a legend\n'col11: string: classification type\n'col12: string: fields for classifications; space delimited for multifields;\n'col13: string: symbol(0) type\n'col14: number: symbol(0) size\n'col15: string: symbol(0) background color\n'col16: string: symbol(0) foreground color\n'col17: string: symbol(0) OutLine Color\n'col18: number: symbol(0) OutL

ine Width\n'col19: number: Threshold min\n'col20: number: Threshold max\n'col21: boolean:Threshold is off?\n'col22: string: comma separated list of each symbol color \n'              (this column width set to zero)\n\n\ntime1=Date.now\nfileList=List.Make\ntheLay =_theView.GetActiveThemes\nmyDia = SELF.getDialog\ntheLB = SELF.getDialog.FindByName(\"aListBox2\")\nLBList=theLB.GetList\n\nirow=theLB.GetCurrentRow\nicol=theLB.GetCurrentColumn\nnrow=theLB.GetRowCount\nncol=theLB.GetColumnCount\n\nif (nrow=1) then\n  msgbox.info(\"No act

ive themes selected.\"+\"Please select themes from view first.\",\"STOP\")\n  exit\nelse\n  if(irow=0) then\n    irow=1\n  end\nend\n\ntheView=_theView\n\ntheViewName=theView.GetName\ntheViewNameFile=theViewName.Substitute(\" \", \"_\")\ntheViewNameFileBMP=theViewNameFile + \".bmp\"\ntheViewNameFileBMP=theViewNameFileBMP.asFileName\ntheViewNameFileSVG=theViewNameFile+\".svg\"\ntheViewNameFileSVG=theViewNameFileSVG.AsFileName\n\n'convert to BMP\nbmpchk=SELF.getDialog.FindByName(\"aCheckBox15\")\nif (bmpchk.IsSelected=true) then\n  clt=SELF.Ge

tDialog.FindByName(\"aTextLine13\")\n  bmp2pngFN=clt.GetText\n  system.execute(bmp2pngFN.AsString ++ theViewNameFileBMP.AsString)\n  fileList.add(theViewNameFileBMP)\nend\n\ntheScale=theView.ReturnScale\nif (theScale=0) then\n    MsgBox.Info (\"Please set view map units before exporting.  Exiting.\", \"Units not set!\")\n    exit\nend\n\ntheDir=MsgBox.Input (\"Enter the path to an existing directory where you want to put the files.\", \"Specifiy file location\", \"c:\\temp\")\nif (theDir=nil) then\n  exit\nend\ntheDir=theDir.AsFileName

\ntheDir.SetCWD\n\nthePrj = theView.GetProjection\nproject_flag = thePrj.IsNull.Not  'true if projected\ntheVisExtent = theView.GetDisplay.ReturnVisExtent\n'=========================\ntheWin = theView.GetWin\ntheExtent = theWin.ReturnExtent\n\ntheX = theExtent.GetX - (_theView.GetTOCWidth + 15)\ntheY = theExtent.GetY - 31\n\nNumber.SetDefFormat( \"d.dddddddd\" )\n\ntheMaxXImage = theX\ntheMaxYImage = theY\ntheVisRect = theView.GetDisplay.ReturnVisExtent\ntheMinxView = theVisRect.GetLeft\ntheMinyView = theVisRect.GetTop\ntheMaxxV

iew = theVisRect.GetRight\ntheMaxyView = theVisRect.GetBottom\n\ntheImageXunit = (theMaxxView - theMinxView)/theMaxXImage\ntheImageYunit = (theMaxyView - theMinyView)/theMaxYImage\n\ntheDisplay=theView.getDisplay\ntheUnits=theDisplay.getUnits\n\nNumber.SetDefFormat( \"\" )\ntheWidth=theX\ntheWidth.SetFormat(\"d\")\ntheHeight=theY\ntheHeight.SetFormat(\"d\")\ntheScale=theView.ReturnScale\ntheScale.SetFormat(\"d\")\n\ntheProjection=thePrj.AsString\n\nsourcename = \"source.svg\"\nsearchString1 = \"<!--TEST1-->\"\nsearchString2 = \"<!--TEST2-->

\"\ncurdir = FileName.getCWD\nsourcefile = FileName.merge(curdir.AsString,sourcename)\nif (File.Exists(sourcefile)) then\n  fileNameIn =sourcefile\nelse\n  fileNameIn = FileDialog.Show(\"*.svg\", \"File (*.svg)\", \"Where is the file \"+sourcename.Quote+\" ?\")\n  if ( fileNameIn = nil ) then\n    exit\n  end\nend\nfileIn = LineFile.Make( fileNameIn, #FILE_PERM_READ )\ntotal  = fileIn.GetSize\ntot    = total-1\nfound1 = -1\nfor each i in 0..tot\n  fileIn.setPos(i)\n  str = fileIn.readElt\n  if (str.contains(searchString1)) then\n    f

ound1 = i\n  end \n  if (str.contains(searchString2)) then\n    found2 = i\n  end \nend\nfileIn.GoToBeg\nLineList1 = List.Make\nLineList2 = List.Make\nLineList3 = List.Make\nfileIn.Read( LineList1, found1 )\nfileIn.Read( LineList2, found2-found1 )\nfileIn.Read( LineList3, total-found2 )\n\n'file1=theViewNameFile+\".scd\"\n'scrdata=LineFile.Make(file1.AsFileName, #FILE_PERM_WRITE)\n'scrdata.setScratch(true)\n\nfile2=theViewNameFile+\".scg\"\nscrgeom=LineFile.Make(file2.AsFileName, #FILE_PERM_WRITE)\nscrgeom.setScratch(true)\n\nSVGfil

e =LineFile.Make(theViewNameFileSVG, #FILE_PERM_WRITE)\nfileList.add(theViewNameFileSVG)\n\nSVGfile.gotoBeg\nfor each svgstr in LineList1\n  SVGfile.WriteElt(svgstr)\nend\n\nDocElem =\"_\"+theViewNameFile.substitute(\"#\",\"_\").substitute(\"+\",\"_\")\nSVGfile.WriteElt(\"<\"+DocElem+\">\")\nav.showstopbutton\n'********************* SLD , ELD and GetFeature *******************\n_themeStep=0\n_themeStep.setFormat(\"d\")\nSLDs=\"<StyledLayerDescriptor>\"\nELDs=\"<ExtendedLayerDescriptor>\"\nGFs=\"<GetFeature maxFeatures=\"\"1000\"\">\"\nav.ShowStopBut

ton\nfor each theTheme in theView.GetActiveThemes\n  TL=LBList.Get(_themeStep+1)\n  theThemeName=TL.Get(0).AsString\n  av.ShowMsg(\"Processing \" + theThemeName +\" style...\")\n  themePeriodIndex=theThemeName.Indexof(\".\")\n  if (not(themePeriodIndex=-1)) then\n    theThemeName=theThemeName.Left(themePeriodIndex)\n  end\n  theThemeNameTable=theThemeName.Substitute(\" \", \"_\")\n  nmdLay = String.MakeBuffer(1*4) +\"<NamedLayer name=\"+ theThemeNameTable.Quote + \">\"\n	 SLDs=SLDs + nl + nmdLay\n	 SLDs=SLDs + nl + string.MakeBuffer

(2*4) +\"<UserStyle>\"\n  theShape = TL.Get(1).AsString\n  theTag =theShape+\"Symbol\"\n  if ( (Not(theShape=\"Polygon\")) AND (Not(theShape=\"Point\")) ) then \n    theShape=\"Line\"\n    theTag =theShape+\"StringSymbol\"\n  end\n	 SLDs=SLDs + nl + string.MakeBuffer(3*4) +\"<\"+theTag+\">\"\n	 'SLDs=SLDs + nl + string.MakeBuffer(4*4) +\"<Geometry>\"\n	 'SLDs=SLDs + nl + string.MakeBuffer(5*4) +\"<FetchFeatureProperty name=\"+theThemeNameTable.Quote+\"/>\"\n	 'SLDs=SLDs + nl + string.MakeBuffer(4*4) +\"</Geometry>\"\n  if (Not(TL.Get(16).AsS

tring=\"NULL\")) then\n    SLDs=SLDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"\",\"\",\"FillColor\",TL.Get(16).AsString})\n  end\n  if (Not(TL.Get(17).AsString=\"NULL\")) then\n    SLDs=SLDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"\",\"\",\"StrokeColor\",TL.Get(17).AsString})\n  end\n	 SLDs=SLDs + nl + string.MakeBuffer(3*4) +\"</\"+theTag+\">\"\n	 SLDs=SLDs + nl + string.MakeBuffer(2*4) +\"</UserStyle>\"\n	 SLDs=SLDs + nl + string.MakeBuffer(1*4) +\"</NamedLayer>\"\n\n  ELDs=ELDs + nl + nmdLay\n  ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",

\"\",\"TableName\",theThemeNameTable})\n  ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"Shape\",theShape.LCase})\n  ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"MinScale\",TL.Get(19).AsString})\n  ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"MaxScale\",TL.Get(20).AsString})\n  ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"HasAttributes\",1})\n  if (TL.Get(4)=true) then\n    ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"IDType\",\"server\"})\n  else\n    ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"IDType\"

,\"local\"})\n  end\n  ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"NameField\",TL.Get(7).GetName.AsString})\n  ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"IDField\",TL.Get(6).GetName.AsString})\n  ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"URL\",TL.Get(5).AsString})\n  ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"LegendType\",TL.Get(9).AsString})\n  ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"ClassificationType\",TL.Get(11).AsString})\n  if (Not(TL.Get(12).AsString.Trim=\"\")) then\n    ELDs=ELDs + 

nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"ClassificationField\",TL.Get(12).AsString.Trim})\n  end\n  ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"ClassesCount\",TL.Get(10).AsString})\n  st = TL.Get(13).AsString\n  if (st=\"SYMBOL_PEN\") then\n    st=\"pen\"\n  elseif (st=\"SYMBOL_MARKER\") then\n    st=\"marker\"\n  elseif (st=\"SYMBOL_FILL\") then\n    st=\"fill\"\n  elseif (st=\"SYMBOL_TEXT\") then\n    st=\"text\"\n  elseif (st=\"SYMBOL_CHART\") then\n    st=\"chart\"\n  end\n  ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"SymbolType\",st}

)\n  if (Not(TL.Get(14).AsString=\"NULL\")) then\n    ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"SymbolSize\",TL.Get(14).SetFormat(\"d.dd\").AsString})    \n  end\n  if (Not(TL.Get(18).AsString=\"NULL\")) then\n    ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"StrokeWidth\",TL.Get(18).AsString})\n  end\n\n  colstr=\"\"\n  for each coleur in TL.Get(22)\n    colstr=colstr++coleur\n  end\n  ELDs=ELDs + nl + av.Run(\"toWKT.makeTags\",{\"\",\"\",\"ColorList\",colstr.trim})\n\n	 ELDs=ELDs + nl + string.MakeBuffer(1*4) +\"</NamedLayer>\"\n

\n  GFs=GFs + nl + string.MakeBuffer(1*4) +	\"<Query typeName=\"+ theThemeNameTable.Quote +\"/>\"\n\n  _themeStep=_themeStep+1\nend\n\nSLDs=SLDs + nl + \"</StyledLayerDescriptor>\"\nSVGfile.WriteElt(SLDs)\nELDs=ELDs + nl + \"</ExtendedLayerDescriptor>\"\nSVGfile.WriteElt(ELDs)\nGFs=GFs + nl + \"</GetFeature>\"\nSVGfile.WriteElt(GFs)\n\n'********************* featureCollection *******************\nabc=theMinxView.AsString + \",\" +theMinyView.AsString + \" \"+theMaxxView.AsString + \",\"+theMaxyView.AsString\nSVGfile.WriteElt(\"<featureCol

lection>\")\ngmlS = av.Run(\"toWKT.makeTags\",{\"\",\"boundedBy\",\"Box\",abc})\nSVGfile.WriteElt(gmlS)\n\n_themeStep=0\n_themeStep.setFormat(\"d\")\nnomThm =theView.GetActiveThemes.count\nfor each theTheme in theView.GetActiveThemes\n  TL=LBList.Get(_themeStep+1) \n  \n  theThemeName=TL.Get(0).AsString\n    themePeriodIndex=theThemeName.Indexof(\".\")\n  if (not(themePeriodIndex=-1)) then\n    theThemeName=theThemeName.Left(themePeriodIndex)\n  end\n  theThemeNameTable=theThemeName.Substitute(\" \", \"_\")\n  theLay =_theView.GetActiveThe

mes\n  theThm = theLay.Get(_themeStep)\n  av.ShowMsg(\"Processing \" + theThemeName +\" features...\")\n     \n  theFTab = theThm.GetFTab\n  shapeField = theFTab.FindField(\"Shape\")\n\n  theNumRecs = theFtab.GetNumRecords\n  sbUnit = 100/theNumRecs\n  sb = sbUnit\n  \n  layname = \"l\"+theThemeNameTable\n  scrgeom.WriteElt(\"<g id=\"+ layname.Quote +\">\")\n  \n    for each i in 0..(theNumRecs -1)\n        if ((theFtab.returnvalue(shapeField,i).Intersects(theVisExtent)) or (theFtab.returnvalue(shapeField,i).IsContainedIn(theVisExten

t)))  then\n            txtOut = \"\"\n            thePrjShape = theFtab.returnvalue(shapeField,i).ReturnProjected(thePrj)\n            theShapeExtent=thePrjShape.ReturnExtent\n            Number.SetDefFormat( \"d.dddddddd\" )\n            i.setFormat(\"d\")\n            theShapeType=theTheme.GetSrcName.GetSubName\n\n            SVGfile.WriteElt(string.MakeBuffer(1*4)+\"<featureMember>\")\n            SVGfile.WriteElt(string.MakeBuffer(2*4)+\"<\"+theThemeNameTable+\">\")\n            tstp =i+1\n            tagindex =theThemeNameT

able+\".FeatureID\"\n            tstp.SetFormat(\"d\")\n            SVGfile.WriteElt(string.MakeBuffer(3*4) + \"<\" + tagindex + \">\" + tstp.AsString + \"</\"+tagindex+\">\")\n                       \n            if (theShapeType.contains(\"polygon\")) then              \n                thePrjShape = thePrjShape.ReturnClipped(theVisExtent)\n                theShapeExtent=thePrjShape.ReturnExtent\n                XMin = theShapeExtent.GetLeft\n                XMax = theShapeExtent.GetRight\n                YMin = theShapeExtent.

GetTop              \n                YMax = theShapeExtent.GetBottom\n               \n                thePolygonlist = thePrjShape.AsPolyline.Explode                              \n                dstr=\"\"\n                for each poly in thePolygonList\n                  'substitue commas with spaces, newlines with commas\n                  tsr =poly.AsString.Substitute(nl,\" \")\n                  tsr =tsr.right(tsr.count-tsr.indexOf(\" \")-1) 'removing the *Polyxxx* word\n                  tsr =tsr.right(tsr.count-

tsr.indexOf(\" \")-1) 'removing parts count, which SHOULD be one\n                  tsr =tsr.right(tsr.count-tsr.indexOf(\" \")-1) 'removing number of points for each part\n                  \n                  sid = tsr.indexOf(\" \")\n                  lstr =tsr.left(sid) \n                  rstr =tsr.right(tsr.count-sid)\n                  tsr = \"M\" + lstr + \" L\" + rstr\n                  dstr=dstr+tsr\n                end 'added\n                idstr=layname+\"f\"+tstp.AsString\n                pstr=\"<path id=\"+ idstr.Q

uote +\" d=\" + dstr.trim.Quote + \"/>\"\n                scrgeom.WriteElt(pstr)                \n\n            elseif (theShapeType.contains(\"arc\")) then\n                thePrjShape = thePrjShape.ReturnClipped(theVisExtent)\n                theShapeExtent=thePrjShape.ReturnExtent\n                XMin = theShapeExtent.GetLeft\n                XMax = theShapeExtent.GetRight\n                YMin = theShapeExtent.GetTop\n                YMax = theShapeExtent.GetBottom\n                thePList = thePrjShape.Explode\n     

           dstr=\"\"\n                for each p in thePList 'added\n                  tsr =p.AsString.Substitute(nl,\" \")\n                  tsr =tsr.right(tsr.count-tsr.indexOf(\" \")-1) 'removing the *PolyLine* word\n                  tsr =tsr.right(tsr.count-tsr.indexOf(\" \")-1) 'removing parts count, which is always one\n                  tsr =tsr.right(tsr.count-tsr.indexOf(\" \")-1) 'removing number of points for each part\n                  tsr =tsr.Trim\n                    \n                  sid = tsr.indexOf(\" 

\")\n                  lstr =tsr.left(sid) \n                  rstr =tsr.right(tsr.count-sid)\n                  tsr = \"M\" + lstr + \" L\" + rstr\n                  dstr=dstr+tsr                  \n                end 'added\n                idstr=layname+\"f\"+tstp.AsString\n                pstr=\"<path id=\"+ idstr.Quote +\" d=\" + dstr.trim.Quote + \"/>\"\n                scrgeom.WriteElt(pstr)\n                                \n            elseif (theShapeType.contains(\"point\")) then\n                theXPos = thePrjShape.Ge

tX\n                theYPos = thePrjShape.GetY\n                XMin = theXPos\n                XMax = theXPos\n                YMin = theYPos\n                YMax = theYPos\n                idstr=layname+\"f\"+tstp.AsString\n                pstr=\"<circle id=\"+ idstr.Quote +\" cx=\" + theXPos.AsString.Quote +\" cy=\" + theYPos.AsString.Quote + \"/>\"\n                scrgeom.WriteElt(pstr)\n\n            end\n\n            tagXmin =string.MakeBuffer(1*4) + \"<\" + theThemeNameTable + \".XMin>\" + XMin.AsString + \"</\" + theThemeNa

meTable + \".XMin>\"\n            tagXmax =string.MakeBuffer(1*4) + \"<\" + theThemeNameTable + \".XMax>\" + XMax.AsString + \"</\" + theThemeNameTable + \".XMax>\"\n            tagYmin =string.MakeBuffer(1*4) + \"<\" + theThemeNameTable + \".YMin>\" + YMin.AsString + \"</\" + theThemeNameTable + \".YMin>\"\n            tagYmax =string.MakeBuffer(1*4) + \"<\" + theThemeNameTable + \".YMax>\" + YMax.AsString + \"</\" + theThemeNameTable + \".YMax>\"\n            SVGfile.WriteElt(tagXmin)\n            SVGfile.WriteElt(tagXmax)\n            

SVGfile.WriteElt(tagYmin)\n            SVGfile.WriteElt(tagYmax)\n\n            if (TL.Get(2)=false) then\n                fieldStep=0\n                theFields=TL.Get(3)\n                for each theFN in theFields\n                  if (theFN.Is(String)=true) then \n                    theFieldName=theFN\n                    theField=theThm.GetFTab.FindField(theFN)  \n                  elseif (theFN.Is(Field)=true) then\n                    theField=theFN\n                    theFieldName=theFN.GetName.AsString\n    

              end\n                  gmlFName=theFieldName.BasicTrim(\" \",\" \").Substitute(\" \", \"_\")\n                  theValue = theFtab.ReturnValueString(theField,i)\n                  if (Not(theValue.AsString=\"\")) then\n                    tval = theValue.substitute(\"&\",\"&amp;\")\n                    tval = tval.substitute(\"#\",\"&#35;\")\n                    tval = tval.substitute(\"<\",\"&lt;\")\n                    tval = tval.substitute(\">\",\"&gt;\")\n                    tval = tval.substitute(\"%\",\"&#37;\")\n           

         tagF =string.MakeBuffer(1*4) + \"<\" + theThemeNameTable + \".\"+gmlFName+\">\" + tval + \"</\" + theThemeNameTable + \".\"+gmlFName+\">\"\n                    SVGfile.WriteElt(tagF)\n                  end       \n                  fieldStep=fieldStep+1\n                end\n            end\n\n        tabstr = string.MakeBuffer(1*4)\n        SVGfile.WriteElt(tabstr+\"</\"+theThemeNameTable+\">\")\n        tabstr = string.MakeBuffer(1*4)\n        SVGfile.WriteElt(tabstr+\"</featureMember>\")\n            \n     end\n     av.SetSt

atus(sb)\n     sb = sb + sbUnit\n     \n  end\n  scrgeom.WriteElt(\"</g>\")\n  Number.SetDefFormat(\"d\")\n  _themeStep=_themeStep+1\n  \nend\nSVGfile.WriteElt(\"</featureCollection>\")\nSVGfile.WriteElt(\"</\"+DocElem+\">\")\n\nscrgeom.flush\nscrgeom.gotoBeg\ntotgeom  = scrgeom.GetSize\nLineListgeom = List.Make\nscrgeom.Read( LineListgeom, totgeom )\n\nfor each svgstr in LineList2\n  SVGfile.WriteElt(svgstr)\nend\nfor each geomstr in LineListgeom\n  SVGfile.WriteElt(geomstr)\nend\nfor each svgstr in LineList3\n  SVGfile.WriteElt(svgstr)\nend

\n\nscrgeom.close\nSVGfile.close\n\ndur=Date.now-time1\nmsgbox.info(\"Completed in \"+dur.asSeconds.asString+\" seconds\",\"Duration\")\nav.Run(\"toWKT.filesCreated\",fileList)\nav.ClearStatus"

)



(Script.188

	Name:	"ExtINSTALL"

	SourceCode:	"if (av.GetProject = nil) then\n  return nil\nend\n\n'0:dialogs\nfor each d in SELF.Get(0)\n  av.GetProject.AddDialog(d)\nend\n\n'1:menus\n'2:controls, buttonbar\nviewGUIs=av.FindGUIsFor(View)\nfor each aviewGUI in viewGUIs\n  for each b in SELF.Get(2)\n    aviewGUI.GetButtonBar.Add(b, 999)\n  end\nend\n\n'3:toolmenus, toolbar\n\n'4:script : add themselves\n\nav.getproject.setmodified(true)\nstr=\"toWKT GUI has been loaded.\"\nstr=str+nl+\"To start the utility: Activate a View and click the Blue Diamond button on the buttonbar\"\nmsgbox

.info(str,\"GUI for toWKT\")"

)



(Script.189

	Name:	"ExtUNINSTALL"

	SourceCode:	"if (av.GetProject = nil) then\n  return nil\nend\nif (av.GetProject.IsClosing) then\n  return nil\nend\n\n'0:docs removal\nfor each d in SELF.Get(0)\n  av.GetProject.RemoveDialog(d.GetName)\nend\n\n'2:controls, buttonbar\nviewGUIs=av.FindGUIsFor(View)\nfor each aviewGUI in viewGUIs\n  for each b in SELF.Get(2)\n    aviewGUI.GetButtonBar.Remove(b)\n  end\nend\n"

)



