Index: /mnt/d/eclipse/workspace/openlayers/examples/vector-features.html
===================================================================
--- /mnt/d/eclipse/workspace/openlayers/examples/vector-features.html	(revision 3354)
+++ /mnt/d/eclipse/workspace/openlayers/examples/vector-features.html	(working copy)
@@ -21,6 +21,16 @@
             var style_blue = OpenLayers.Util.extend({}, OpenLayers.Feature.Vector.style['default']);
             style_blue.strokeColor = "blue"; 
             style_blue.fillColor = "blue"; 
+            style_blue.externalGraphic = "../img/marker.png";
+            
+            // each of the three lines below means the same, if only one ot
+            // them is active: the image will have a size of 24px, and the
+            // aspect ratio will be kept
+            style_blue.pointRadius = 12;
+            //style_blue.graphicWidth = 24;
+            //style_blue.graphicHeight = 24;
+            
+            style_blue.fillOpacity = 1;
             var style_green = {
                 strokeColor: "#00FF00",
                 strokeOpacity: 1,
@@ -28,6 +38,14 @@
                 pointRadius: 6,
                 pointerEvents: "visiblePainted"
             };
+            var style_mark = OpenLayers.Util.extend({}, OpenLayers.Feature.Vector.style['default']);
+            
+            // if graphicWidth and graphicHeight are both set, the aspect ratio
+            // of the image will be ignored
+						style_mark.graphicWidth = 24;
+						style_mark.graphicHeight = 20;
+						
+						style_mark.externalGraphic = "../img/marker.png";          	
             
             var vectorLayer = new OpenLayers.Layer.Vector("Simple Geometry");
             
@@ -34,6 +52,10 @@
             // create a point feature
             var point = new OpenLayers.Geometry.Point(-111.04, 45.68);
             var pointFeature = new OpenLayers.Feature.Vector(point,null,style_blue);
+            var point2 = new OpenLayers.Geometry.Point(-105.04, 49.68);
+            var pointFeature2 = new OpenLayers.Feature.Vector(point2,null,style_green);
+            var point3 = new OpenLayers.Geometry.Point(-105.04, 49.68);
+            var pointFeature3 = new OpenLayers.Feature.Vector(point3,null,style_mark);
             
             // create a line feature from a list of points
             var pointList = [];
@@ -64,7 +86,7 @@
             
             map.addLayer(vectorLayer);
             map.setCenter(new OpenLayers.LonLat(point.x, point.y), 5);
-            vectorLayer.addFeatures([pointFeature, lineFeature, polygonFeature]);
+            vectorLayer.addFeatures([pointFeature, pointFeature3, pointFeature2, lineFeature, polygonFeature]);
         }
         // -->
     </script>
Index: /mnt/d/eclipse/workspace/openlayers/lib/OpenLayers/Renderer/SVG.js
===================================================================
--- /mnt/d/eclipse/workspace/openlayers/lib/OpenLayers/Renderer/SVG.js	(revision 3354)
+++ /mnt/d/eclipse/workspace/openlayers/lib/OpenLayers/Renderer/SVG.js	(working copy)
@@ -165,7 +165,42 @@
         options = options || node._options;
 
         if (node._geometryClass == "OpenLayers.Geometry.Point") {
-            node.setAttributeNS(null, "r", style.pointRadius);
+            if (style.externalGraphic) {
+                // remove old node
+                var id = node.getAttributeNS(null, "id");
+                var x = node.getAttributeNS(null, "cx");
+                var y = node.getAttributeNS(null, "cy");
+                var _featureId = node._featureId;
+                var _geometryClass = node._geometryClass;
+                var _style = node._style;
+                this.root.removeChild(node);
+                
+                // create new image node
+                var node = this.createNode("image", id);
+                node._featureId = _featureId;
+                node._geometryClass = _geometryClass;
+                node._style = _style;
+                this.root.appendChild(node);
+
+                // now style the new node
+                if (style.graphicWidth && style.graphicHeight) {
+                  node.setAttributeNS(null, "preserveAspectRatio", "none");
+                }
+                var width = style.graphicWidth || style.graphicHeight;
+                var height = style.graphicHeight || style.graphicWidth;
+                width = width ? width : style.pointRadius*2;
+                height = height ? height : style.pointRadius*2;
+                
+                node.setAttributeNS(null, "x", x-(.5*width).toFixed());
+                node.setAttributeNS(null, "y", -y-(.5*height).toFixed());
+                node.setAttributeNS(null, "width", width);
+                node.setAttributeNS(null, "height", height);
+                node.setAttributeNS("http://www.w3.org/1999/xlink", "href", style.externalGraphic);
+                node.setAttributeNS(null, "transform", "scale(1,-1)");
+                node.setAttributeNS(null, "style", "opacity: "+style.fillOpacity);
+            } else {
+                node.setAttributeNS(null, "r", style.pointRadius);
+            }
         }
         
         if (options.isFilled) {
Index: /mnt/d/eclipse/workspace/openlayers/lib/OpenLayers/Renderer/VML.js
===================================================================
--- /mnt/d/eclipse/workspace/openlayers/lib/OpenLayers/Renderer/VML.js	(revision 3354)
+++ /mnt/d/eclipse/workspace/openlayers/lib/OpenLayers/Renderer/VML.js	(working copy)
@@ -129,7 +129,49 @@
         options = options || node._options;
         
         if (node._geometryClass == "OpenLayers.Geometry.Point") {
-            this.drawCircle(node, geometry, style.pointRadius);
+            if (style.externalGraphic) {
+                // remove old node
+                var id = node.id;
+                var _featureId = node._featureId;
+                var _geometryClass = node._geometryClass;
+                var _style = node._style;
+                this.root.removeChild(node);
+                
+                // create new image node
+                var node = this.createNode("v:rect", id);
+                var fill = this.createNode("v:fill", id+"_image");
+                node.appendChild(fill);
+                node._featureId = _featureId;
+                node._geometryClass = _geometryClass;
+                node._style = _style;
+                this.root.appendChild(node);
+                
+                fill.src = style.externalGraphic;
+                fill.type = "frame";
+                node.style.flip = "y";
+                
+                if (!(style.graphicWidth && style.graphicHeight)) {
+                  fill.aspect = "atmost";
+                }
+                
+                // now style the new node
+                var width = style.graphicWidth || style.graphicHeight;
+                var height = style.graphicHeight || style.graphicWidth;
+                width = width ? width : style.pointRadius*2;
+                height = height ? height : style.pointRadius*2;
+                var resolution = this.getResolution();
+                node.style.left = (geometry.x/resolution-.5*width).toFixed();
+                node.style.top = (geometry.y/resolution-.5*height).toFixed();
+                node.style.width = width;
+                node.style.height = height;    
+                
+                // modify fill style for rect styling below
+                style.fillColor = "none";
+                style.strokeColor = "none";
+                         
+            } else {
+                this.drawCircle(node, geometry, style.pointRadius);
+            }
         }
 
       //fill
@@ -146,7 +188,9 @@
                 fill = this.createNode('v:fill', node.id + "_fill");
                 node.appendChild(fill);
             }
-            fill.setAttribute("opacity", style.fillOpacity);
+            if (style.fillOpacity) {
+                fill.setAttribute("opacity", style.fillOpacity);
+            }
         }
 
 
